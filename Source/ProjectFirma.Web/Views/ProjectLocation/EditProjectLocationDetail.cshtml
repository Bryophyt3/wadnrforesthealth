@*-----------------------------------------------------------------------
<copyright file="EditProjectLocationDetail.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Views
@using ProjectFirma.Web.Views.Shared
@using LtInfo.Common.DhtmlWrappers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits ProjectFirma.Web.Views.ProjectLocation.EditProjectLocationDetail
@section JavascriptAndStylesContent
{
    @{
        DhtmlxGridIncludes.RenderPartialView(Html);
        MapJavascriptIncludes.RenderPartialView(Html); 

    }

    <script type="text/javascript" src="~/Content/angular/angular-sanitize.min.js"></script>
    @*<script type="text/javascript" src="/ng-text-truncate-master/ng-text-truncate.js"></script>*@

    <script type="text/javascript" src="~/Views/ProjectLocation/EditProjectLocationDetailController.js"></script>


    <script type="text/javascript" th:inline="javascript">
            angular.module("EditProjectLocationDetailApp").factory("angularModelAndViewData", function () {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model)),
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.AngularViewData))
                };
            });
            jQuery(function () {
                // Override Dhtmlxgrid reset button to work in modal
                //Sitka.projectAndProjectLocationTypeGrid.clearAllCookies = function () {
                //    this.grid.clearConfigCookie();
                //    this.clearSavedFilterValues();
                //    Sitka.Methods.eraseCookie(this.getGridCookieName() + "filterVisible");

                //    jQuery(this.grid.entBox).find(".filter :input").val("").trigger("keydown").trigger("change");
                //};
                var uploadGisInputTypeInput = jQuery("#uploadGisInputType");
                uploadGisInputTypeInput.on("change", function (event) {
                    jQuery(".uploadGisInputFileHelpBlock").hide();
                    var selectedInputType = jQuery(event.target).val();
                    if (!Sitka.Methods.isUndefinedNullOrEmpty(selectedInputType)) {
                        jQuery(".uploadGidInputFileGroup").show();
                        jQuery(".uploadGisInputFileHelpBlock[data-uploadgistypeid=" + selectedInputType + "]").show();
                        jQuery(".uploadGisSubmit").prop("disabled", false);
                    } else {
                        jQuery(".uploadGidInputFileGroup").hide();
                        jQuery(".uploadGisSubmit").prop("disabled", true);
                    }
                });
                uploadGisInputTypeInput.trigger("change");

                HookupCheckIfFormIsDirtyNoDisable("#projectLocationsForm");
        });



//This is the code from the project firma detail location

 getDrawOptions = function(editableFeatureGroup)
    {
        var myIcon = L.MakiMarkers.icon({
            icon: "marker",
            color: "#f357a1",
            size: "m"
        });

        var options = {
            position: 'topleft',
            draw: {
                polyline: {
                    shapeOptions: {
                        color: '#f357a1',
                        weight: 10
                    }
                },
                polygon: {
                    allowIntersection: false, // Restricts shapes to simple polygons
                    drawError: {
                        color: '#e1e100', // Color the shape will turn when intersects
                        message: 'Self-intersecting polygons are not allowed.' // Message that will show when intersect
                    },
                    shapeOptions: {
                        color: '#f357a1'
                    }
                },
                circle: false, // Turns off this drawing tool
                rectangle: {
                    shapeOptions: {
                        color: "#f357a1"
                    }
                },
                marker: {
                    icon: myIcon
                }
            },
            edit: {
                featureGroup: editableFeatureGroup, //REQUIRED!!
                edit: {
                    maintainColor: true,
                    opacity: 0.3
                },
                remove: true
            }
        };
        return options;
    };

    var projectFirmaMap;
    jQuery(document).ready(function()
    {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.AngularViewData.EditProjectLocationDetailMapInitJson).ToString(Formatting.None));
        var editableFeatureJsonObject = @Html.Raw(JObject.FromObject(ViewDataTyped.AngularViewData.EditProjectLocationDetailLayerGeoJson).ToString(Formatting.None));
        projectFirmaMap = new ProjectFirmaMaps.Map(mapInitJson);

        projectFirmaMap.editableFeatureGroup = new L.FeatureGroup();

        var bindAnnotationPopup = function(layer, feature)
        {
            var leafletId = layer._leaflet_id;
            var popupOptions = {
                minWidth: 200
            };
            layer.bindPopup("", popupOptions);
            layer.on('click', function(f)
            {
                if(layer.editing.enabled())
                {
                    f.target.closePopup();
                    return;
                }
                var popup = f.target._popup;
                var annotation = Sitka.Methods.isUndefinedNullOrEmpty(feature) ? "" : Sitka.Methods.isUndefinedNullOrEmpty(feature.properties.Info) ? "" : feature.properties.Info;
                var annotationMaxLength = @ViewDataTyped.AnnotationMaxLength;
                var charsRemaining = annotationMaxLength - annotation.length;
                var textareaId = projectFirmaMap.getTextAreaId(leafletId);
                var charRemainingForTextareaId = "CharactersRemaining_" + textareaId;
                var popupContent = "<b>Notes:</b> <br />" +
                    "<textarea id=\"" + textareaId + "\" " +
                    "onkeyup=\"Sitka.Methods.keepTextAreaWithinMaxLength(this, " + annotationMaxLength + ", 20, '" + charRemainingForTextareaId + "', 'Characters Remaining: ');\" " +
                    "onkeydown=\"Sitka.Methods.keepTextAreaWithinMaxLength(this, " + annotationMaxLength + ", 20, '" + charRemainingForTextareaId +  "', 'Characters Remaining: ');\">" +
                    annotation + "</textarea>" +
                    "<div id=\"" + charRemainingForTextareaId + "\" style=\"text-align:right;color:#666666;\">Characters Remaining: " + charsRemaining + "</div><br />" +
                    "<button id=\"buttonFor" + leafletId + "\" class=\"button btn-xs btn-info\" onclick=\"savePopupAnnotationEditor(" + leafletId + ")\">Save</button>";
                popup.setContent(popupContent);
                popup.update();

                jQuery("#textboxFor" + leafletId).focus();
            });
        };

        var layerGroup = L.geoJson(editableFeatureJsonObject.GeoJsonFeatureCollection, {
            onEachFeature: function(feature, layer)
            {
                if (layer.getLayers)
                {
                    layer.getLayers().forEach(function(l) { projectFirmaMap.editableFeatureGroup.addLayer(l); });
                }
                else
                {
                    projectFirmaMap.editableFeatureGroup.addLayer(layer);
                }
                bindAnnotationPopup(layer, feature);
            }
        });

        var drawOptions = getDrawOptions(projectFirmaMap.editableFeatureGroup);
        var drawControl = new L.Control.Draw(drawOptions);
        projectFirmaMap.map.addControl(drawControl);
        projectFirmaMap.map.addLayer(projectFirmaMap.editableFeatureGroup);

        projectFirmaMap.map.on('draw:created', function(e)
        {
            var layer = e.layer;
            projectFirmaMap.editableFeatureGroup.addLayer(layer);
            var leafletId = layer._leaflet_id;
            projectFirmaMap.editableFeatureGroup._layers[leafletId].feature = new Object();
            projectFirmaMap.editableFeatureGroup._layers[leafletId].feature.properties = new Object();
            projectFirmaMap.editableFeatureGroup._layers[leafletId].feature.type = "Feature";
            var feature = projectFirmaMap.editableFeatureGroup._layers[leafletId].feature;
            bindAnnotationPopup(layer, feature);
            updateFeatureCollectionJson();
        });
        projectFirmaMap.map.on('draw:edited', function(e)
        {
            updateFeatureCollectionJson();
        });

        projectFirmaMap.map.on('draw:deleted', function(e)
        {
            updateFeatureCollectionJson();
        });

        updateFeatureCollectionJson();

        @*var saveButton = jQuery("#" + "@ModalDialogFormHelper.SaveButtonID");
        if(!Sitka.Methods.isUndefinedNullOrEmpty(saveButton))
        {
            saveButton.text("Save");
        }

        var modalTitle = jQuery(".ui-dialog-title");
        if(!Sitka.Methods.isUndefinedNullOrEmpty(modalTitle))
        {
            modalTitle.html("@(string.Format("Edit {0} - Detail", FieldDefinition.ProjectLocation.GetFieldDefinitionLabel()))");
        }*@
    });

    ProjectFirmaMaps.Map.prototype.getTextAreaId = function(featureId) { return "textareaFor" + featureId; };


    function savePopupAnnotationEditor(featureId)
    {
        var textBoxForPopup = jQuery("#" + projectFirmaMap.getTextAreaId(featureId));
        projectFirmaMap.editableFeatureGroup._layers[featureId].feature.properties.Info = textBoxForPopup.val();
        projectFirmaMap.map.closePopup();
        updateFeatureCollectionJson();
    }

    function updateFeatureCollectionJson()
    {
        @*var geoJson = projectFirmaMap.editableFeatureGroup.toGeoJSON();
        var mapForm = jQuery("#" + "@ViewDataTyped.MapFormID");
        mapForm.html("");
        var hiddens = [];
        for(var i = 0; i < geoJson.features.length; ++i)
        {
            var currentWktName = "name=\"@Html.NameFor(x => x.WktAndAnnotations[0].Wkt)\"".replace("0", i);
            var currentWktAnnotation = "name=\"@Html.NameFor(x => x.WktAndAnnotations[0].Annotation)\"".replace("0", i);
            hiddens.push("<input type=\"hidden\" " + currentWktName + " value=\"" + Terraformer.WKT.convert(geoJson.features[i].geometry) + "\" />");
            hiddens.push("<input type=\"hidden\" " + currentWktAnnotation + " value=\"" + Sitka.Methods.htmlEncode(geoJson.features[i].properties.Info) + "\" />");
        }
        mapForm.html(hiddens.join("\r\n"));*@
    }

    </script>
}


<div layout:fragment="WizardContent" data-ng-app="EditProjectLocationDetailApp" data-ng-controller="EditProjectLocationDetailController">
    <div class="wizardHeader">
        <h2>ProjectLocations for this <span>@*@ViewDataTyped.getProjectTypeName()*@</span> project</h2>

    </div>

    <div class="wizardMain">
        <p>
            If your project's projectLocations are already mapped in GIS, you may upload a File Geodatabase (GDB, Shape, KMZ).
            Otherwise, you can create a drawing of your project's projectLocations here:
        </p>
        <ul>
            <li>Zoom to your project area by holding down the Shift key and dragging a rectangle.</li>
            <li>Use the line tool for projectLocations such as roads, pipelines, fences, trenches, power lines, etc.</li>
            <li>Use the polygon tool for projectLocations such as buildings, crops, mines, pits, towers, wells, etc.</li>
            <li>Give each projectLocation a name and description in the table below.</li>
            
        </ul>
        <div class="pull-right buttonsAboveMap">
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#uploadGisModal" @*th:if="@{ !ViewDataTyped.AngularViewData.IsInCompletedReview }"*@>
                Upload GIS File
            </button>
        </div>

        <div class="clearfix"></div>

        <div id="@ViewDataTyped.AngularViewData.EditProjectLocationDetailMapInitJson.MapDivID" class="editMap"></div>

    </div>

    <form method="POST" id="projectLocationsForm" name="projectLocationsForm" action="@ViewDataTyped.PostUrl" @*th:object="@ViewModel"*@ data-ng-submit="reprojectGeometries()">
        <div>

            <table class="table table-bordered table-projectLocations">
                <thead>
                    <tr>
                        <th @*data-ng-if="!AngularViewData.IsInCompletedReview"*@></th>
                        <th style="width: 150px">Feature Name</th>
                        <th>Feature</th>
                        <th>Location Type</th>
  
                        <th style="width: 250px">Notes</th>
                    </tr>
                </thead>
                <tr data-ng-repeat="projectLocation in AngularModel.projectLocationJsons" class="clickable-row"
                    data-ng-class="{'selectedRow': isSelectedProjectLocation(projectLocation)}"
                    data-ng-click="toggleProjectLocationDetails(projectLocation.projectLocationID)">
                    @* trash icon for deleting *@
                    <td @*data-ng-if="!AngularViewData.isInCompletedReview"*@>
                        <a href="javascript:void(0)" data-ng-click="deleteProjectLocationRowAndRefreshMap(projectLocation)">
                            <span class="glyphicon glyphicon-trash"></span>
                        </a>
                    </td>
                    @* feature name *@
                    <td style="width: 150px">
                        <input type="text" name="projectLocationJsons[{{$index}}].projectLocationName"
                               data-ng-model="projectLocation.projectLocationName" style="width: 100%" required maxlength="200"/>
                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'projectLocationName')">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <span data-ng-bind="getProjectLocationErrorMessage($index, 'projectLocationName')"></span>
                        </div>*@
                        <input type="hidden" name="projectLocationJsons[{{$index}}].projectLocationID" value="{{projectLocation.projectLocationID}}"/>
                    </td>
                    @* feature (line, point, poly) *@
                    <td>
                        <span data-ng-bind="projectLocation.projectLocationGeometryType"></span>
                        <input type="hidden" name="projectLocationJsons[{{$index}}].projectLocationGeometry"
                               value="{{projectLocation.projectLocationGeometry}}"/>
                    </td>
                    @* location type (ProjectLocationType table) *@
                    <td>
                        <select name="projectLocationJsons[{{$index}}].projectLocationTypeID"
                                data-ng-model="projectLocation.projectLocationTypeID" required>
                            <option value="">-- Select type --</option>
                            <option data-ng-repeat="projectLocationType in getSelectableProjectLocationTypes(projectLocation)"
                                    value="{{projectLocationType.projectLocationTypeID}}">
                                {{projectLocationType.projectLocationTypeName}}
                            </option>
                        </select>
                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'projectLocationTypeID')">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <span data-ng-bind="getProjectLocationErrorMessage($index, 'projectLocationTypeID')"></span>
                        </div>*@
                    </td>
                    @* notes/annotation *@
                    <td style="width: 250px">
                        <input type="text" name="projectLocationJsons[{{$index}}].notes" data-ng-model="projectLocation.notes" style="width: 100%" maxlength="500"/>
                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'notes')">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <span data-ng-bind="getProjectLocationErrorMessage($index, 'notes')"></span>
                        </div>*@
                    </td>
                </tr>
            </table>
            <p class="systemText">
                *Enter Width of proposed construction area. The DDCT calculation will use this width.
                <span ng-show="AngularModel.projectLocationJsons.length !== 0">
                    <br />ProjectLocation Type you're looking for not listed? Make sure you selected the most appropriate Project Type on the
                    @*<a th:href="@ViewDataTyped.BasicsPageUrl">Basics</a>*@ page.
                </span>
            </p>
        </div>

        @*<div class="alert alert-danger" role="alert" data-ng-repeat="projectLocationJson in getProjectLocationsWithProjectLocationTypesNotAlignedWithGeometryType()">
            For ProjectLocation "{{projectLocationJson.projectLocationName}}", you indicated you have a "{{getProjectLocationTypeName(projectLocationJson.projectLocationTypeID)}}" ProjectLocation Type, yet represented it using a {{projectLocationJson.projectLocationGeometryType}}. While this is allowed, please make sure this is what you want to do.
        </div>*@

        @*<div th:if="@ViewDataTyped.inDueDiligence()" class="projectComment">
            <hr>
            <h4>Review Comments</h4>
            <textarea class="form-control" th:field="*{comments}" maxlength="1000"></textarea>
            <div class="alert alert-danger field-validation-error" role="alert"
                 th:if="${#fields.hasErrors('comments')}">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <span th:errors="*{comments}"></span>
            </div>
        </div>*@

        <div class="wizardButtonGroup">
            <hr>
            <button id="saveButton" type="submit" class="btn btn-primary" value="false" name="autoAdvance">
                Save
            </button>

        </div>

    </form>

    <div id="uploadGisModal" class="modal fade kevin-modal" tabindex="-1" role="dialog">
        <form id="uploadGisForm" th:action="@ViewDataTyped.UploadGisUrl" enctype="multipart/form-data" class="">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title">Upload GIS File</h4>
                    </div>
                    <div class="modal-body">
                        <p>
                            Select the type of GIS File to upload from the list of supported formats.
                        </p>
                        <div class="form-group">
                            <label for="uploadGisInputType" style="width: 100%;">GIS File Type</label>
                            <select name="uploadGisType" id="uploadGisInputType" class="form-control" style="width: auto;">
                                <option value="">-- Select Type --</option>
                                @*<option th:each="type:@ViewDataTyped.UploadGisTypes" th:value="@type.ordinal()" th:text="@type.displayName"></option>*@
                            </select>
                        </div>
                        <div class="form-group uploadGidInputFileGroup">
                            <label for="uploadGisInputFile">GIS File</label>
                            <input id="uploadGisInputFile" name="gisFile" type="file" class="file" style="margin-bottom: 10px;">
                            @*<div class="uploadGisInputFileHelpBlock" th:each="type:@ViewDataTyped.UploadGisTypes" th:attr="data-uploadgistypeid=@type.ordinal()">
                                <p class="help-text">
                                    Supported extensions:
                                    <em th:text="@{#strings.arrayJoin(type.supportedExtensions,', ')}"></em>
                                    <em th:text="@{#strings.arrayJoin(type.supportedExtensions,', ')}"></em>
                                </p>
                                <p class="help-text" th:text="@type.instructionText"></p>
                            </div>*@
                        </div>
                        <div class="progress" style="display: none;">
                            <div class="progress-bar progress-bar-striped active" style="width: 100%"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary uploadGisSubmit" data-ng-click="uploadGisFile()">Upload</button>
                    </div>
                </div>
            </div>
        </form>
    </div>

    @*<div th:replace="proposedProject/ProjectAndProjectLocationType :: projectAndProjectLocationType"></div>*@
</div>



