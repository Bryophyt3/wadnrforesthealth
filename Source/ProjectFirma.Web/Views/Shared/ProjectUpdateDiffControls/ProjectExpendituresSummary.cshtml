@using ProjectFirma.Web.Views.Shared
@using ProjectFirma.Web.Models
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@inherits ProjectFirma.Web.Views.Shared.ProjectUpdateDiffControls.ProjectExpendituresSummary

<table class="summaryLayout">
    <colgroup>
        <col>
        @foreach (var calendarYear in ViewDataTyped.CalendarYears.OrderBy(x => x.CalendarYear))
        {
            switch (calendarYear.AddedDeletedOrRealElement)
            {
                case AddedDeletedOrRealElement.AddedElement:
                    <col class="@calendarYear.DisplayCssClass" style="background-color: @HtmlDiffContainer.BackgroundColorForAddedElement">
                    break;
                case AddedDeletedOrRealElement.DeletedElement:
                <col class="@calendarYear.DisplayCssClass" style="background-color: @HtmlDiffContainer.BackgroundColorForDeletedElement">
                    break;
                case AddedDeletedOrRealElement.RealElement:
                <col>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        <col>
    </colgroup>
    <tr>
        <th>@Html.LabelWithFieldDefinitionFor(FieldDefinition.FundingSource)</th>
        @foreach (var calendarYear in ViewDataTyped.CalendarYears.OrderBy(x => x.CalendarYear))
        {
            <th class="@calendarYear.DisplayCssClass" style="text-align: right">@calendarYear.CalendarYear</th>
        }
        <th style="text-align: right">Total</th>
    </tr>
    @foreach (var fundingSourceExpenditure in ViewDataTyped.FundingSourceExpenditures.OrderBy(x => x.FundingSourceName))
    {
        <tr class="@fundingSourceExpenditure.DisplayCssClass">
            <td>@fundingSourceExpenditure.FundingSourceNameAsUrl</td>
            @foreach (var calendarYear in ViewDataTyped.CalendarYears.OrderBy(x => x.CalendarYear))
            {
                <td class="@calendarYear.DisplayCssClass" style="text-align: right">
                    <span class="normalDollars">@(fundingSourceExpenditure.CalendarYearExpenditure.ContainsKey(calendarYear.CalendarYear) ? fundingSourceExpenditure.CalendarYearExpenditure[calendarYear.CalendarYear].ToIntString() : "0")</span>
                </td>
            }
            <th style="text-align: right">
                <span class="normalDollars">@fundingSourceExpenditure.CalendarYearExpenditure.Sum(x => x.Value).ToIntString()</span>
            </th>
        </tr>
    }
    @if (ViewDataTyped.FundingSourceExpenditures.Any())
    {
        <tr>
            <th>Total:</th>
            @foreach (var calendarYear in ViewDataTyped.CalendarYears.OrderBy(x => x.CalendarYear))
            {
                <th class="@calendarYear.DisplayCssClass" style="text-align: right">
                    <span class="normalDollars">@(ViewDataTyped.FundingSourceExpenditures.Any(x => x.CalendarYearExpenditure.ContainsKey(calendarYear.CalendarYear)) ? ViewDataTyped.FundingSourceExpenditures.SelectMany(x => x.CalendarYearExpenditure).Where(x => x.Key == calendarYear.CalendarYear).Sum(x => x.Value).ToIntString() : "0")</span>
                </th>
            }
            <th style="text-align: right">
                <span class="normalDollars">@ViewDataTyped.FundingSourceExpenditures.SelectMany(x => x.CalendarYearExpenditure).Sum(x => x.Value).ToIntString()</span>
            </th>
        </tr>
    }
</table>
@if (!ViewDataTyped.FundingSourceExpenditures.Any())
{
    <p class="alert">No expenditures have been reported for this project.</p>
}