@*-----------------------------------------------------------------------
    <copyright file="PerformanceMeasureReportedValuesGrouped.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.Views
@using ProjectFirma.Web.Common
@inherits ProjectFirma.Web.Views.Shared.PerformanceMeasureControls.PerformanceMeasureReportedValuesGrouped

@if (ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.Any())
{
    foreach (var performanceMeasureCalendarYearReportedValue in ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.OrderBy(x => x.PerformanceMeasureDisplayName))
    {
        <table class="summaryLayout performanceMeasureTable" style="margin-bottom: 20px; @ViewDataTyped.HideByDefaultStyle()">
            @{
                var subcategoryCount = performanceMeasureCalendarYearReportedValue.PerformanceMeasureSubcategories.Count;
                var pmUnits = performanceMeasureCalendarYearReportedValue.MeasurementUnitType != MeasurementUnitType.Dollars ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType.MeasurementUnitTypeDisplayName : string.Empty;
            }
            <tr style="border-bottom: 1px solid black">
                <th colspan="@(subcategoryCount + ViewDataTyped.CalendarYearsForPerformanceMeasures.Count + 2)">
                    @performanceMeasureCalendarYearReportedValue.PerformanceMeasureDisplayNameAsUrl
                </th>
            </tr>
            @if (!performanceMeasureCalendarYearReportedValue.HasRealSubcategories)
            {
                <tr>
                    <th></th>
                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                    {
                        <th style="text-align: right; vertical-align: bottom; border-bottom: 1px solid;">
                            @calendarYear
                        </th>
                    }
                    <th style="text-align: right; vertical-align: bottom">Total</th>
                    <th style="text-align: center; vertical-align: bottom">Units</th>
                </tr>
                foreach (var subcategoriesReportedValue in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues)
                {
                    <tr>
                        <th></th>
                        @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                        {
                            <td style="text-align: right">
                                @(subcategoriesReportedValue.CalendarYearReportedValue.ContainsKey(calendarYear) ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(subcategoriesReportedValue.CalendarYearReportedValue[calendarYear]) : string.Empty)
                            </td>
                        }
                        <th style="text-align: right">@performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(subcategoriesReportedValue.CalendarYearReportedValue.Sum(z => z.Value))</th>
                        <th style="text-align: center">@pmUnits</th>
                    </tr>
                }
                <tr style="border-top: 1px solid">
                    <th style="text-align: right">Total</th>
                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                    {
                        <th style="text-align: right">
                            @performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Where(p => p.CalendarYearReportedValue.ContainsKey(calendarYear)).Sum(p => p.CalendarYearReportedValue[calendarYear]))
                        </th>
                    }
                    <th style="text-align: right">
                        @performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Sum(p => p.CalendarYearReportedValue.Sum(q => q.Value)))
                    </th>
                    <th style="text-align: center">@pmUnits</th>
                </tr>
            }
            else
            {
                <tr>
                    <th colspan="@subcategoryCount"></th>
                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                    {
                        <th style="text-align: right; vertical-align: bottom; border-bottom: 1px solid;" rowspan="2">
                            @calendarYear
                        </th>
                    }
                    <th style="text-align: right; vertical-align: bottom; border-bottom: 1px solid;" rowspan="2">Total</th>
                    <th style="text-align: right; vertical-align: bottom; border-bottom: 1px solid;" rowspan="2">Units</th>
                </tr>
                <tr style="border-bottom: 1px solid">
                    @if (performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Any())
                    {
                        foreach (var performanceMeasureSubcategoryName in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.First().SubcategoryNames)
                        {
                            <th>
                                @performanceMeasureSubcategoryName
                            </th>
                        }
                    }
                </tr>
                foreach (var subcategoriesReportedValue in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues)
                {
                    <tr>
                        @if (!subcategoriesReportedValue.SubcategoryNames.Any())
                        {
                            <td colspan="@subcategoryCount"></td>
                        }
                        else
                        {
                            foreach (var performanceMeasureValueSubcategoryOption in subcategoriesReportedValue.PerformanceMeasureValueSubcategoryOptions.OrderBy(p => p.PerformanceMeasureSubcategory.PerformanceMeasureSubcategoryDisplayName))
                            {
                                <td>@performanceMeasureValueSubcategoryOption.PerformanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionName</td>
                            }
                        }

                        @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                        {
                            <td style="text-align: right">
                                @(subcategoriesReportedValue.CalendarYearReportedValue.ContainsKey(calendarYear) ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(subcategoriesReportedValue.CalendarYearReportedValue[calendarYear]) : string.Empty)
                            </td>
                        }
                        <th style="text-align: right">@performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(subcategoriesReportedValue.CalendarYearReportedValue.Sum(z => z.Value))</th>
                        <th style="text-align: center">@pmUnits</th>
                    </tr>
                }
                <tr style="border-top: 1px solid">
                    <th colspan="@subcategoryCount" style="text-align: right">Total</th>
                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                    {
                        <th style="text-align: right">
                            @performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Where(p => p.CalendarYearReportedValue.ContainsKey(calendarYear)).Sum(p => p.CalendarYearReportedValue[calendarYear]))
                        </th>
                    }
                    <th style="text-align: right">
                        @performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Sum(p => p.CalendarYearReportedValue.Sum(q => q.Value)))
                    </th>
                    <th style="text-align: center">@pmUnits</th>
                </tr>
            }
        </table>
    }
}
else
{
    <p class="systemText">No annual @MultiTenantHelpers.GetPerformanceMeasureName().ToLower() accomplishments entered for this project.</p>
}

@if (ViewDataTyped.ExemptReportingYears.Any())
{
    <hr />
    <table class="summaryLayout">
        <tr>
            <td colspan="2">No accomplishments to report for:</td>
        </tr>
        <tr>
            <th>Year(s):</th>
            <td>@string.Join(", ", ViewDataTyped.ExemptReportingYears.OrderBy(x => x))</td>
        </tr>
        <tr>
            <th>Explanation:</th>
            <td>@Html.Raw(ViewDataTyped.ExemptionExplanation.HtmlEncodeWithBreaks())</td>
        </tr>
    </table>
}
