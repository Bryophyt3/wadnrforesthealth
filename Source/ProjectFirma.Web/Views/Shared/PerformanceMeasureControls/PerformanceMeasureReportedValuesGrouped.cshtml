@*-----------------------------------------------------------------------
<copyright file="PerformanceMeasureReportedValuesGrouped.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Sitka Technology Group</author>
<date>Wednesday, February 22, 2017</date>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.Views
@using ProjectFirma.Web.Common
@inherits ProjectFirma.Web.Views.Shared.PerformanceMeasureControls.PerformanceMeasureReportedValuesGrouped

@if (ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.Any())
{
    var maxSubcategoryCount = ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.Max(p => p.SubcategoriesReportedValues.First().SubcategoryNames.Count());

    foreach (var performanceMeasureCalendarYearReportedValue in ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.OrderBy(x => x.PerformanceMeasureDisplayName))
    {
        <table id="performanceMeasureTable_@(performanceMeasureCalendarYearReportedValue.PerformanceMeasureID)" class="summaryLayout performanceMeasureTable" style="margin-bottom: 20px; @ViewDataTyped.HideByDefaultStyle()">
            @{
                //TODO: Move this into the viewdata
                var subcategoryCount = performanceMeasureCalendarYearReportedValue.HasRealSubcategories ? performanceMeasureCalendarYearReportedValue.PerformanceMeasureSubcategories.Count : 0;

                var mismatchedSubcategoryCount = maxSubcategoryCount - subcategoryCount + 1;

                var pmUnits = performanceMeasureCalendarYearReportedValue.MeasurementUnitType != MeasurementUnitType.Dollars ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType.MeasurementUnitTypeDisplayName : string.Empty;
            }
            <tr style="border-bottom: 1px solid black">
                <th colspan="@(maxSubcategoryCount + ViewDataTyped.CalendarYearsForPerformanceMeasures.Count + 2)">
                    @Html.LabelWithSugarFor(FieldDefinition.PerformanceMeasure): @performanceMeasureCalendarYearReportedValue.PerformanceMeasureDisplayNameAsUrl
                </th>
            </tr>
            <tr>
                <th colspan="@maxSubcategoryCount">
                    @Html.LabelWithSugarFor(FieldDefinition.PerformanceMeasureSubcategory)
                </th>
                @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                {
                    <th style="text-align: right; vertical-align: bottom" rowspan="2">
                        @calendarYear
                    </th>
                }
                <th style="text-align: right; vertical-align: bottom" rowspan="2">Total</th>
                <th style="text-align: right; vertical-align: bottom" rowspan="2">Units</th>
            </tr>
            <tr style="border-bottom: 1px solid">
                @if (performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Any())
                {
                    var paddedColumnCount = 0;
                    foreach (var performanceMeasureSubcategoryName in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.First().SubcategoryNames)
                    {
                        paddedColumnCount++;
                        var padding = paddedColumnCount == subcategoryCount ? mismatchedSubcategoryCount : 0;
                        <th colspan="@padding">
                            @performanceMeasureSubcategoryName
                        </th>
                    }
                }
            </tr>
            
            @{
                var backgroundColor = "white";
            }
            @foreach (var subcategoriesReportedValue in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues)
            {
                backgroundColor = backgroundColor == "white" ? "none" : "white";

            <tr style="background-color: @backgroundColor">
                @{ var paddedColumnCount = 0; }

                @foreach (var performanceMeasureValueSubcategoryOption in subcategoriesReportedValue.PerformanceMeasureValueSubcategoryOptions.OrderBy(p => p.PerformanceMeasureSubcategory.PerformanceMeasureSubcategoryDisplayName))
                {
                    paddedColumnCount++;
                    var padding = paddedColumnCount == subcategoryCount ? mismatchedSubcategoryCount : 0;
                    <td colspan="@padding">@performanceMeasureValueSubcategoryOption.PerformanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionName</td>
                }

                @if (!subcategoriesReportedValue.SubcategoryNames.Any())
                {
                    <td colspan="@maxSubcategoryCount"></td>
                }

                @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                {
                    <td style="text-align: right">
                        @(subcategoriesReportedValue.CalendarYearReportedValue.ContainsKey(calendarYear) ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(subcategoriesReportedValue.CalendarYearReportedValue[calendarYear]) : string.Empty)
                    </td>
                }
                <th style="text-align: right">@performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(subcategoriesReportedValue.CalendarYearReportedValue.Sum(z => z.Value))</th>
                <th>@pmUnits</th>
            </tr>
            }
            <tr style="border-top: 1px solid">
                <th colspan="@maxSubcategoryCount" style="text-align: right">Total</th>
                @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy))
                {
                    <th style="text-align: right">
                        @performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Where(p => p.CalendarYearReportedValue.ContainsKey(calendarYear)).Sum(p => p.CalendarYearReportedValue[calendarYear]))
                    </th>
                }
                <th style="text-align: right">
                    @performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Sum(p => p.CalendarYearReportedValue.Sum(q => q.Value)))

                </th>
                <th>@pmUnits</th>
            </tr>
            <tr>
                <td colspan="0">
                    <br/>
                </td>
            </tr>
        </table>
    }
}
else
{
    <p class="alert">No annual @MultiTenantHelpers.GetPerformanceMeasureName().ToLower() accomplishments entered for this project.</p>
}

@if (ViewDataTyped.ExemptReportingYears.Any())
{
    <hr />
    <table class="summaryLayout">
        <tr>
            <td colspan="2">No accomplishments to report for:</td>
        </tr>
        <tr>
            <th>Year(s):</th>
            <td>@string.Join(", ", ViewDataTyped.ExemptReportingYears.OrderBy(x => x))</td>
        </tr>
        <tr>
            <th>Explanation:</th>
            <td>@Html.Raw(ViewDataTyped.ExemptionExplanation.HtmlEncodeWithBreaks())</td>
        </tr>
    </table>
}
