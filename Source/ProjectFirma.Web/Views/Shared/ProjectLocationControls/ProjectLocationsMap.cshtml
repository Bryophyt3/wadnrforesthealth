@*-----------------------------------------------------------------------
    <copyright file="ProjectLocationsMap.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Views.Shared.ProjectLocationControls
@inherits ProjectFirma.Web.Views.Shared.ProjectLocationControls.ProjectLocationsMap

@functions {
    private object GetConditionalProjectLocationsMapControllerDivContent()
    {
        if (this.ViewDataTyped.ProjectMapGridDisplayType == ProjectMapGridDisplayType.ShowGrid)
        {
            return "ng-controller = ProjectLocationsMapController";
        }
        return string.Empty;
    }

}

<style>
    .mapLegendContainer {
        padding: 5px;
    }

    #mapLegend {
        margin-top: 10px;
    }

    .mapLegendElement {
        display: inline-block;
        margin-right: 10px;
    }

    .mapLegendIcon {
        margin-bottom: -30px;
    }

    .mapLegendElement .maki-marker {
        background-color: blue;
        margin-left: 0 !important;
    }

    #mapLegendTitle {
        font-weight: bold;
    }
</style>



    <div @GetConditionalProjectLocationsMapControllerDivContent()>
        <div id="@ViewDataTyped.MapDivID"></div>
        <div class="mapLegendContainer">
            <span id="mapLegendTitle">@ViewDataTyped.LegendTitle</span>
            <div id="mapLegend">
            </div>
        </div>
    @if (this.ViewDataTyped.ProjectMapGridDisplayType == ProjectMapGridDisplayType.ShowGrid)
    {
        <div class="mapGridContainer">
            <table class="table table-bordered table-projectLocations">
                <thead>
                <tr>
                    <th @*data-ng-if="!AngularViewData.IsInCompletedReview"*@></th>
                    <th style="width: 150px">Feature Name</th>
                    <th>Feature</th>
                    <th>Location Type</th>

                    <th style="width: 250px">Notes</th>
                </tr>
                </thead>
                <tr data-ng-repeat="projectLocation in AngularModel.ProjectLocationJsons" class="clickable-row"
                    data-ng-class="{'selectedRow': isSelectedProjectLocation(projectLocation)}"
                    data-ng-click="toggleProjectLocationDetails(projectLocation.ProjectLocationLeafletID)">
                    @* trash icon for deleting *@
                    <td @*data-ng-if="!AngularViewData.isInCompletedReview"*@>
                        <a href="javascript:void(0)" data-ng-click="deleteProjectLocationRowAndRefreshMap(projectLocation.ProjectLocationLeafletID)">
                            <span class="glyphicon glyphicon-trash"></span>
                        </a>
                    </td>
                    @* feature name *@
                    <td style="width: 200px">
                        <input type="text" name="ProjectLocationJsons[{{$index}}].ProjectLocationName"
                               data-ng-model="projectLocation.ProjectLocationName" value="{{projectLocation.ProjectLocationName}}" style="width: 100%" required maxlength="200"/>
                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'projectLocationName')">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <span data-ng-bind="getProjectLocationErrorMessage($index, 'projectLocationName')"></span>
                            </div>*@
                        <span ng-if="projectLocation.projectLocationID != null">
                            <input type="hidden" name="ProjectLocationJsons[{{$index}}].projectLocationID" value="{{projectLocation.projectLocationID}}"/>
                        </span>
                    </td>
                    @* feature (line, point, poly) *@
                    <td>
                        <span data-ng-bind="projectLocation.ProjectLocationFeatureType"></span>
                        <input type="hidden" name="ProjectLocationJsons[{{$index}}].ProjectLocationGeometryWellKnownText"
                               value="{{projectLocation.ProjectLocationGeometryWellKnownText}}"/>
                    </td>
                    @* location type (ProjectLocationType table) *@
                    <td>
                        <select name="ProjectLocationJsons[{{$index}}].ProjectLocationTypeID"
                                ng-model="projectLocation.ProjectLocationTypeID" required>
                            <option value="">-- Select type --</option>
                            <option ng-repeat="projectLocationType in AngularViewData.ProjectLocationTypeJsons"
                                    value="{{projectLocationType.ProjectLocationTypeID}}" ng-selected="projectLocationType.ProjectLocationTypeID === projectLocation.ProjectLocationTypeID">
                                {{projectLocationType.ProjectLocationTypeDisplayName}}
                            </option>
                        </select>


                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'projectLocationTypeID')">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <span data-ng-bind="getProjectLocationErrorMessage($index, 'projectLocationTypeID')"></span>
                            </div>*@
                    </td>
                    @* notes/annotation *@
                    <td style="width: 250px">
                        <input type="text" name="ProjectLocationJsons[{{$index}}].ProjectLocationNotes" data-ng-model="projectLocation.ProjectLocationNotes" style="width: 100%" maxlength="500"/>
                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'notes')">
                                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <span data-ng-bind="getProjectLocationErrorMessage($index, 'notes')"></span>
                            </div>*@
                    </td>
                </tr>
            </table>

        </div>
    }
    </div>


<script type="text/javascript">
    // we are extending ProjectFirma Maps here with functionality specific to this partial view
    ProjectFirmaMaps.Map.prototype.initializeProjectLocations = function(projectLocationsMapInitJson)
    {
        if (Sitka.Methods.isUndefinedNullOrEmpty(projectLocationsMapInitJson.ProjectMapCustomization))
        {
            throw new Error("No map customization object defined!");
        }
        this.legendColorsToUse = @Html.Raw(JObject.FromObject(ViewDataTyped.LegendFormats).ToString(Formatting.None));

        // default to no clustering
        this.areLocationsClustered = false;
        // set the project locations
        this.projectLocations = projectLocationsMapInitJson.ProjectLocationsLayerGeoJson;

        // initialize to no filters
        this.mapCustomizationObject = projectLocationsMapInitJson.ProjectMapCustomization;
        // draw the project locations
        this.addLocationLayers();
    };

    ProjectFirmaMaps.Map.prototype.changeFilter = function(filterPropertyNameSelected, actualFilter)
    {
        this.mapCustomizationObject.FilterPropertyName = filterPropertyNameSelected;
        this.mapCustomizationObject.FilterPropertyValues = actualFilter;
        this.addLocationLayers();
    };

    ProjectFirmaMaps.Map.prototype.changePropertyToColorProjectLocationsBy = function(colorByPropertyName)
    {
        this.mapCustomizationObject.ColorByPropertyName = colorByPropertyName;
        this.addLocationLayers();
    };

    ProjectFirmaMaps.Map.prototype.changeClustering = function(areLocationsClustered)
    {
        this.areLocationsClustered = areLocationsClustered;
        this.addLocationLayers();
    };

    ProjectFirmaMaps.Map.prototype.addLocationLayers = function()
    {
        this.projectLocationsLayer = this.addProjectLocationsToMap(this.projectLocations, this.projectLocationsLayer, "Mapped Projects", true);
    }

    ProjectFirmaMaps.Map.prototype.addProjectLocationsToMap = function(points, layer, layerName, showByDefault)
    {
        var self = this;
        if (layer != null)
        {
            this.map.removeLayer(layer);
            this.layerControl.removeLayer(layer);
        }

        var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
        var markerClusterGroup = L.markerClusterGroup({ maxClusterRadius: 40 });
        var newLayer = L.geoJson(points.GeoJsonFeatureCollection, {
            pointToLayer: function(feature, latlng)
            {
                var legendColor = _.result(_.find(markerColorTable, function(legendItem) { return legendItem.LegendID == feature.properties[self.mapCustomizationObject.ColorByPropertyName]; }), 'LegendColor');
                var marker = L.marker(latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: legendColor, size: "s" }) });
                self.bindPopupToFeature(marker, feature);
                return marker;
            },
            filter: function(feature)
            {
                if (Sitka.Methods.isUndefinedNullOrEmpty(self.mapCustomizationObject.FilterPropertyName))
                {
                    return true;
                }
                else
                {
                    return _.intersection(_.map(feature.properties[self.mapCustomizationObject.FilterPropertyName].split(","), Number), _.map(self.mapCustomizationObject.FilterPropertyValues, Number)).length > 0;
                }
            }
        });
        if (this.areLocationsClustered)
        {
            newLayer.addTo(markerClusterGroup);
            layer = markerClusterGroup;
        }
        else
        {
            layer = newLayer;
        }

        if (showByDefault)
        {
            layer.addTo(this.map);
        }

        this.layerControl.addOverlay(layer, layerName);

        jQuery("#mapLegend").html(this.getLegend());

        return layer;
    };

    ProjectFirmaMaps.Map.prototype.getLegend = function() {
        var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
        var allLegendsHtml = "";
        for (var i = 0; i < markerColorTable.length; ++i)
        {
            var currentLegendIcon = L.MakiMarkers.icon({ icon: "marker", color: markerColorTable[i].LegendColor, size: "m" }),
                currentLegendAsHtml = currentLegendIcon.options.iconUrl;
            allLegendsHtml += "<div class=\"mapLegendElement\">" + "<img class='mapLegendIcon' src= '" + currentLegendAsHtml  + "'></img>" + markerColorTable[i].LegendText + "</div>";
        }
        return allLegendsHtml;
    };
</script>
<script type="text/javascript" src="@Url.Content("~/Views/Shared/ProjectLocationControls/ProjectLocationsMapController.js")"></script>
<script type="text/javascript">
    // <![CDATA[
    angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
        function() {
            return {
                "AngularModel": "",
                "AngularViewData":
                    @Html.Raw(JObject.FromObject(ViewDataTyped).ToString(Formatting.None)),
            };
        });
    angular.bootstrap(jQuery("[ng-controller=\"ProjectLocationsMapController\"]"), ["ProjectFirmaApp"]);
    // ]]>
</script>