@*-----------------------------------------------------------------------
<copyright file="EditProjectLocationSimple.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using LtInfo.Common.HtmlHelperExtensions
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits ProjectFirma.Web.Views.Shared.ProjectLocationControls.EditProjectLocationSimple

<style>
    .groupedControl {
        border: solid grey 1px;
        border-radius: 5px;
        margin: 5px;
        padding: 5px;
    }

    .mapDiv {
        height: 500px;
    }
</style>

<div class="row">
    <div class="col-xs-12">
        <p>
            Enter your @FieldDefinition.Project.GetFieldDefinitionLabel()’s location by plotting a point on the map or picking a known area from the list.
            This "Simple" information is used to indicate the general location of your @FieldDefinition.Project.GetFieldDefinitionLabel() within the basin and for
            summarizing accomplishments by geospatial categories such as State, County/City, or @FieldDefinition.Watershed.GetFieldDefinitionLabel().
        </p>
    </div>
</div>

<div class="row">
    <div class="col-xs-12 col-md-5 col-lg-4">
        <form method="POST" id="@ViewDataTyped.MapFormID" action="@ViewDataTyped.MapPostUrl">
            @Html.LabelWithSugarFor(FieldDefinition.ProjectLocation, LabelWithSugarForExtensions.DisplayStyle.HelpIconOnly)
            <strong>How do you want to specify your simple @FieldDefinition.ProjectLocation.GetFieldDefinitionLabel()?</strong>

            <div class="groupedControl">
                @Html.RadioButtonFor(x => x.ProjectLocationSimpleType, ProjectLocationSimpleTypeEnum.PointOnMap, new { @id = "ProjectLocationTypePointOnMap" })
                Plot a point on the map
                @Html.TextBoxFor(x => x.ProjectLocationPointX, new { style = "visibility: hidden; display:inline; width:0" })
                @Html.HiddenFor(x => x.ProjectLocationPointY)
                @Html.ValidationMessageFor(x => x.ProjectLocationPointX)
            </div>

            <div class="groupedControl">
                @Html.RadioButtonFor(x => x.ProjectLocationSimpleType, ProjectLocationSimpleTypeEnum.NamedAreas, new { @id = "ProjectLocationTypeNamedAreas" })
                Pick from list of known areas
                @Html.HiddenFor(m => m.ProjectLocationAreaID)
            </div>

            <div class="groupedControl">
                @Html.RadioButtonFor(x => x.ProjectLocationSimpleType, ProjectLocationSimpleTypeEnum.None, new { @id = "ProjectLocationTypeNone" })
                No location
            </div>
            <div style="margin: 10px 0">
                @Html.LabelWithSugarFor(x => x.ProjectLocationNotes)<br />
                @Html.TextAreaWithMaxLengthFor(m => m.ProjectLocationNotes, new TextAreaForExtensions.TextAreaDimensions(null, 2), null)
                @Html.ValidationMessageFor(x => x.ProjectLocationNotes)
            </div>
        </form>
        <div id="@ViewDataTyped.ProjectLocationInformationContainer"></div>
        <div id="selectedGeometryLocationInformation"></div>
    </div>
    <div class="col-md-7 col-lg-8" id="mapContainer">
        <p>
            To zoom, hold down Shift and drag a rectangle.
        </p>
        <div id="@ViewDataTyped.MapInitJson.MapDivID" class="mapDiv"></div>
        <p>
            If your @FieldDefinition.Project.GetFieldDefinitionLabel() has multiple locations, plot a point that best represents it, e.g. the centroid of the area where it is focused.
        </p>
    </div>
</div>

<script type="text/javascript" language="javascript">
    //@@ sourceURl = EditProjectLocationSimple.js
    // we are extending ProjectFirma Maps to handle the edit project locations functinality
    ProjectFirmaMaps.Map.prototype.changeMarkerOnMap = function(self, e) {
        self.removeLayerFromMap(self.currentMarker);
        self.currentMarker = L.marker(e.latlng,
            { icon: L.MakiMarkers.icon({ icon: "marker", color: "#f00", size: "m" }) });
        self.currentMarker.addTo(self.map);
        // Note that we manually trigger a change event for these, which otherwise IS NOT generated!
        // We need self so that external clients can hook into changes to these values.
        self.projectLocationPointYHiddenField.val(e.latlng.lat.toFixed(4)).trigger('change');
        self.projectLocationPointXHiddenField.val(e.latlng.lng.toFixed(4)).trigger('change');
        self.updateLocationInformationOnMap(self.projectLocationInformationContainer, e.latlng);
    };

    ProjectFirmaMaps.Map.prototype.disableSelectPointOnMap = function() {
        this.removeLayerFromMap(this.currentMarker);
        this.projectLocationInformationContainer.html("");
        this.removeClickEventHandler(this.changeMarkerOnMap);
        document.getElementById(this.MapDivId).style.cursor = 'default';
    };

    ProjectFirmaMaps.Map.prototype.enableLocationEditorMap = function() {
        this.projectLocationInformationContainer.show();
        this.map.scrollWheelZoom.enable();
        this.unblockMap();
    };

    ProjectFirmaMaps.Map.prototype.disableLocationEditorMap = function() {
        this.projectLocationInformationContainer.hide();
        this.map.scrollWheelZoom.disable();
        this.blockMap();
    };

    function handleClickForSelectGeometryFromMap (event) {
        var self = this,
            watershedMapServerLayerName = "@ViewDataTyped.WatershedMapServerLayerName",
            mapServerUrl = "@ViewDataTyped.MapServerUrl";

        // ReSharper disable ConditionIsAlwaysConst - empty string should resolve false
        if (!watershedMapServerLayerName || !mapServerUrl)
        // ReSharper restore ConditionIsAlwaysConst
        // ReSharper disable once HeuristicallyUnreachableCode - is reachable if either string is empty
            return;

        var parameters = L.Util.extend(this.wfsParams,
            {
                typeName: watershedMapServerLayerName,
                cql_filter: "intersects(Ogr_Geometry, POINT(" + event.latlng.lat + " " + event.latlng.lng + "))"
            });
        SitkaAjax.ajax({
                url: mapServerUrl + L.Util.getParamString(parameters),
                dataType: "json",
                jsonpCallback: "getJson"
            },
            function (response) {
                if (response.features.length === 0)
                    return;

                if (self.currentSelectedGeometry) {
                    self.map.removeLayer(self.currentSelectedGeometry);
                }
                var layerOptions = {
                    style: function() {
                        return { color: "#f00" };
                    }
                };
                // ReSharper disable once InconsistentNaming
                self.currentSelectedGeometry = new L.geoJSON(response.features, layerOptions);
                self.map.addLayer(self.currentSelectedGeometry);
                self.map.fitBounds(self.currentSelectedGeometry.getBounds());

                var mergedProperties = _.merge.apply(_, _.map(response.features, "properties")),
                    propertiesForDisplay = {
                        "Latitude": L.Util.formatNum(event.latlng.lat, 4),
                        "Longitude": L.Util.formatNum(event.latlng.lng, 4),
                        "@(FieldDefinition.Watershed.GetFieldDefinitionLabel())": mergedProperties.WatershedName
                    };

                self.selectedGeometryLocationInformation.html(self.getLocationInformationContent(propertiesForDisplay));

                // ReSharper disable once InconsistentNaming
                var projectLocationAreaIDFromWatershedIDUrl = new Sitka.UrlTemplate("@ViewDataTyped.ProjectLocationAreaIDFromWatershedIDUrlTemplate")
                    .ParameterReplace(mergedProperties.WatershedID);
                jQuery.get(projectLocationAreaIDFromWatershedIDUrl).done(function (data) {
                    jQuery("[name=\"" + "@Html.NameFor(m => m.ProjectLocationAreaID)" + "\"]").val(data);
                });

            },
            function() {
                alert("There was an error selecting the @FieldDefinition.ProjectLocation.GetFieldDefinitionLabel() area from list.");
                self.selectedProjectAreaLayer = null;
            }
        );
    }

    ProjectFirmaMaps.Map.prototype.enableSelectGeometryFromMap = function() {
        this.map.on("click", handleClickForSelectGeometryFromMap.bind(this));
        this.selectedGeometryLocationInformation.show();
        if (this.currentSelectedGeometry) {
            this.map.addLayer(this.currentSelectedGeometry);
        }
        document.getElementById(this.MapDivId).style.cursor = "crosshair";
    };
    ProjectFirmaMaps.Map.prototype.disableSelectGeometryFromMap = function() {
        this.map.off("click");
        this.selectedGeometryLocationInformation.hide();
        if (this.currentSelectedGeometry) {
            this.map.removeLayer(this.currentSelectedGeometry);
        }
        document.getElementById(this.MapDivId).style.cursor = "default";
    };

    ProjectFirmaMaps.Map.prototype.addMarkerOnMap = function()
    {
        // add markers
        if (!Sitka.Methods.isUndefinedNullOrEmpty(this.projectLocationPointXHiddenField.val()) && !Sitka.Methods.isUndefinedNullOrEmpty(this.projectLocationPointYHiddenField.val()))
        {
            var latLng = new L.LatLng(this.projectLocationPointYHiddenField.val(), this.projectLocationPointXHiddenField.val());
            this.currentMarker = L.marker(latLng, { icon: L.MakiMarkers.icon({ icon: "marker", color: "#f00", size: "m" }) });
            this.currentMarker.addTo(this.map);
            this.updateLocationInformationOnMap(this.projectLocationInformationContainer, latLng);
        }
        this.assignClickEventHandler(this.changeMarkerOnMap);
        document.getElementById(this.MapDivId).style.cursor = 'crosshair';
    };

    ProjectFirmaMaps.Map.prototype.initializeProjectLocationEditor = function()
    {
        var self = this;
        this.currentMarker = null;
        this.selectedProjectAreaLayer = null;

        this.projectLocationInformationContainer = jQuery("#@ViewDataTyped.ProjectLocationInformationContainer");
        this.selectedGeometryLocationInformation = jQuery("#selectedGeometryLocationInformation");

        this.projectLocationPointXHiddenField = jQuery("#@Html.IdFor(x => x.ProjectLocationPointX)");
        this.projectLocationPointYHiddenField = jQuery("#@Html.IdFor(x => x.ProjectLocationPointY)");
        this.projectLocationTypePointOnMapRadioButton = jQuery("#ProjectLocationTypePointOnMap");
        this.projectLocationTypeNamedAreasRadioButton = jQuery("#ProjectLocationTypeNamedAreas");
        this.projectLocationTypeNoneRadioButton = jQuery("#ProjectLocationTypeNone");
        this.projectLocationTypePointOnMapRadioButton.change(function() { self.onProjectLocationTypeChanged(); });
        this.projectLocationTypeNamedAreasRadioButton.change(function() { self.onProjectLocationTypeChanged(); });
        this.projectLocationTypeNoneRadioButton.change(function () { self.onProjectLocationTypeChanged(); });

        var initiallySelectedFeature = @Html.Raw(ViewDataTyped.InitiallySelectedProjectLocationFeature != null ? JObject.FromObject(ViewDataTyped.InitiallySelectedProjectLocationFeature).ToString(Formatting.None) : "null");
        if (initiallySelectedFeature) {
            var layerOptions = {
                style: function() {
                    return { color: "#f00" };
                }
            };
            this.currentSelectedGeometry = L.geoJSON(initiallySelectedFeature, layerOptions);
        }

        this.onProjectLocationTypeChanged();
    };

    ProjectFirmaMaps.Map.prototype.onProjectLocationTypeChanged = function()
    {
        if (this.projectLocationTypePointOnMapRadioButton.is(':checked'))
        {
            this.disableSelectGeometryFromMap();
            this.addMarkerOnMap();
            this.enableLocationEditorMap();
        }
        else if (this.projectLocationTypeNamedAreasRadioButton.is(':checked'))
        {
            this.disableSelectPointOnMap();
            this.enableSelectGeometryFromMap();
            this.enableLocationEditorMap();
        }
        else
        {
            this.disableSelectPointOnMap();
            this.disableSelectGeometryFromMap();
            this.disableLocationEditorMap();
        }
    };

    ProjectFirmaMaps.Map.prototype.handleWmsPopupClickEventWithCurrentLayer = function() {
        // Override parent to do nothing
        return function() {};
    }

    ProjectFirmaMaps.Map.prototype.updateLocationInformationOnMap = function (projectLocationInformationContainer, latlng) {
        var properties = L.Util.extend({
                "Latitude": L.Util.formatNum(latlng.lat, 4),
                "Longitude": L.Util.formatNum(latlng.lng, 4)
            },
            _(this.vectorLayers)
            .filter(function(vectorLayer) { return typeof vectorLayer.eachLayer !== "undefined"; })
            .map(function(vectorLayer) { return leafletPip.pointInLayer(latlng, vectorLayer, true).length; })
            .filter(function(match) {
                return match.length;
            })
            .map(function(match) {
                return match[0].feature.properties;
            })
            .flatten()
            .value()
        );
        projectLocationInformationContainer.html(this.getLocationInformationContent(properties));
    };

    ProjectFirmaMaps.Map.prototype.getLocationInformationContent = function(properties) {
        var locationInformationContent = _.map(properties,
                    function(value, key) {
                        return document.getElementById("locationInformationProperty").innerHTML
                            .replace(/{{key}}/g, key)
                            .replace(/{{value}}/g, value);
                    })
                .join(""),
            locationInformationHtml = document.getElementById("locationInformationTemplate").innerHTML
                .replace(/{{locationInformationContent}}/g, locationInformationContent);
        return locationInformationHtml;
    };

    jQuery(document).ready(function()
    {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
        var projectFirmaMap = new ProjectFirmaMaps.Map(mapInitJson);
        projectFirmaMap.initializeProjectLocationEditor();
    });
</script>
<script type="text/template" id="locationInformationTemplate">
    <table class="summaryLayout">
        <tbody>
            <tr><th colspan="2">Location Information</th></tr>
            {{locationInformationContent}}
        </tbody>
    </table>
</script>
<script type="text/template" id="locationInformationProperty">
    <tr>
        <td>{{key}}:</td>
        <td>{{value}}</td>
    </tr>
</script>
