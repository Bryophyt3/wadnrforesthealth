@using ProjectFirma.Web.Models
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits ProjectFirma.Web.Views.Shared.ProjectLocationControls.EditProjectLocationSimple

<style>
    .summaryLayout .dropdown-menu {
        background-color: white;
        font-size: 13px;
    }

    .dropdownSingleSelect button {
        font-size: 13px;
        padding: 3px 18px 3px 5px !important;
    }

    .dropdown-header:hover {
        background-color: white !important;
        color: rgb(119, 119, 119) !important;
        cursor: default;
    }

    .groupedControl {
        border: solid grey 1px;
        border-radius: 5px;
        margin: 5px;
        padding: 5px;
    }

    .mapDiv
    {
        height: 500px;
    }

</style>

<p>
    Enter your Project’s location by plotting a point on the map or picking a known area from the list.
    This "Simple" information is used to indicate the general location of your project within the basin and for
    summarizing accomplishments by geospatial categories such as State, County/City, or Watershed.
</p>
<hr />
<div>
    <table style="width: 100%" class="summaryLayout">
        <tr>
            <td style="width: 250px">
                <form method="POST" id="@ViewDataTyped.MapFormID" action="@ViewDataTyped.MapPostUrl">
                    @Html.LabelWithFieldDefinitionFor(FieldDefinition.ProjectLocation, LabelForExtensions.DisplayStyle.HelpIconOnly)
                    <b>How do you want to specify your simple Project location?</b>

                    <div class="groupedControl">
                        @Html.RadioButtonFor(x => x.ProjectLocationSimpleType, ProjectLocationSimpleTypeEnum.PointOnMap, new { @id = "ProjectLocationTypePointOnMap" })
                        Plot a point on the map
                        @Html.TextBoxFor(x => x.ProjectLocationPointX, new { style = "visibility: hidden; display:inline; width:0" })
                        @Html.HiddenFor(x => x.ProjectLocationPointY)
                        @Html.ValidationMessageFor(x => x.ProjectLocationPointX)
                    </div>

                    <div class="groupedControl">
                        @Html.RadioButtonFor(x => x.ProjectLocationSimpleType, ProjectLocationSimpleTypeEnum.NamedAreas, new { @id = "ProjectLocationTypeNamedAreas" })
                        Pick from list of known areas
                        @Html.DropDownListFor(x => x.ProjectLocationAreaID, ViewDataTyped.ProjectLocationSelectListItems)
                    </div>

                    <div class="groupedControl">
                        @Html.RadioButtonFor(x => x.ProjectLocationSimpleType, ProjectLocationSimpleTypeEnum.None, new { @id = "ProjectLocationTypeNone" })
                        No location
                    </div>
                    <div style="margin: 10px 0">
                        @Html.LabelFor(x => x.ProjectLocationNotes)<br />
                        @Html.TextAreaWithMaxLengthFor(m => m.ProjectLocationNotes, new TextAreaForExtensions.TextAreaDimensions(null, 2), null)
                        @Html.ValidationMessageFor(x => x.ProjectLocationNotes)
                    </div>
                </form>
                <div id="@ViewDataTyped.ProjectLocationInformationContainer"></div>
            </td>
            <td id="mapContainer">
                To zoom into a specific area, hold down the Shift key and drag a rectangle.
                <div id="@ViewDataTyped.MapInitJson.MapDivID" class="mapDiv">
                </div>
                If your project has multiple locations, plot a point that best represents it, e.g. the centroid of the area where it is focused.
            </td>
        </tr>
    </table>
</div>

<script type="text/javascript" language="javascript">
    // we are extending ProjectFirma Maps to handle the edit project locations functinality
    ProjectFirmaMaps.Map.prototype.changeMarkerOnMap = function(self, e)
    {
        self.removeLayerFromMap(self.currentMarker);
        self.currentMarker = L.marker(e.latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: "#FF0000", size: "m" }) });
        self.currentMarker.addTo(self.map);
        // Note that we manually trigger a change event for these, which otherwise IS NOT generated!
        // We need self so that external clients can hook into changes to these values.
        self.projectLocationPointYHiddenField.val(e.latlng.lat.toFixed(4)).trigger('change');
        self.projectLocationPointXHiddenField.val(e.latlng.lng.toFixed(4)).trigger('change');
        self.updateLocationInformationOnMap(self.projectLocationInformationContainer, e.latlng);
    };

    ProjectFirmaMaps.Map.prototype.disableSelectPointOnMap = function()
    {
        this.removeLayerFromMap(this.currentMarker);
        this.projectLocationInformationContainer.html("");
        this.removeClickEventHandler(this.changeMarkerOnMap);
        document.getElementById(this.MapDivId).style.cursor = 'default';
    };

    ProjectFirmaMaps.Map.prototype.enableLocationEditorMap = function()
    {
        this.projectLocationInformationContainer.show();
        this.map.scrollWheelZoom.enable();
        this.unblockMap();
    };

    ProjectFirmaMaps.Map.prototype.disableLocationEditorMap = function()
    {
        this.projectLocationInformationContainer.hide();
        this.map.scrollWheelZoom.disable();
        this.blockMap();
    };

    ProjectFirmaMaps.Map.prototype.addMarkerOnMap = function()
    {
        // add markers
        if (!Sitka.Methods.isUndefinedNullOrEmpty(this.projectLocationPointXHiddenField.val()) && !Sitka.Methods.isUndefinedNullOrEmpty(this.projectLocationPointYHiddenField.val()))
        {
            var latLng = new L.LatLng(this.projectLocationPointYHiddenField.val(), this.projectLocationPointXHiddenField.val());
            this.currentMarker = L.marker(latLng, { icon: L.MakiMarkers.icon({ icon: "marker", color: "#FF0000", size: "m" }) });
            this.currentMarker.addTo(this.map);
            this.updateLocationInformationOnMap(this.projectLocationInformationContainer, latLng);
        }
        this.assignClickEventHandler(this.changeMarkerOnMap);
        document.getElementById(this.MapDivId).style.cursor = 'crosshair';
    };

    ProjectFirmaMaps.Map.prototype.initializeProjectLocationEditor = function()
    {
        var self = this;
        this.currentMarker = null;
        this.selectedProjectAreaLayer = null;
        this.projectLocationInformationContainer = jQuery("#@ViewDataTyped.ProjectLocationInformationContainer");
        this.projectLocationPointXHiddenField = jQuery("#@Html.IdFor(x => x.ProjectLocationPointX)");
        this.projectLocationPointYHiddenField = jQuery("#@Html.IdFor(x => x.ProjectLocationPointY)");
        this.projectLocationAreasDropDown = jQuery('#ProjectLocationAreaID');
        this.projectLocationTypePointOnMapRadioButton = jQuery("#ProjectLocationTypePointOnMap");
        this.projectLocationTypeNamedAreasRadioButton = jQuery("#ProjectLocationTypeNamedAreas");
        this.projectLocationTypeNoneRadioButton = jQuery("#ProjectLocationTypeNone");

        this.projectLocationTypePointOnMapRadioButton.change(function() { self.onProjectLocationTypeChanged(); });
        this.projectLocationTypeNamedAreasRadioButton.change(function() { self.onProjectLocationTypeChanged(); });
        this.projectLocationTypeNoneRadioButton.change(function() { self.onProjectLocationTypeChanged(); });

        this.projectLocationAreasDropDown.selectpicker({ size: 12 });        
        this.projectLocationAreasDropDown.change(function() { self.onProjectLocationAreaDropdownChanged(); });

        this.onProjectLocationTypeChanged();
    };

    ProjectFirmaMaps.Map.prototype.onProjectLocationTypeChanged = function()
    {
        if (this.projectLocationTypePointOnMapRadioButton.is(':checked'))
        {
            this.removeLayerFromMap(this.selectedProjectAreaLayer);
            this.addMarkerOnMap();
            this.enableLocationEditorMap();
        }
        else if (this.projectLocationTypeNamedAreasRadioButton.is(':checked'))
        {
            this.disableSelectPointOnMap();
            this.projectLocationAreasDropDown.change();
            this.enableLocationEditorMap();
        }
        else
        {
            this.removeLayerFromMap(this.selectedProjectAreaLayer);
            this.disableSelectPointOnMap();
            this.disableLocationEditorMap();
        }
    };

    ProjectFirmaMaps.Map.prototype.onProjectLocationAreaDropdownChanged = function()
    {
        var self = this;
        this.removeLayerFromMap(this.selectedProjectAreaLayer);
        if(this.projectLocationTypeNamedAreasRadioButton.is(':checked') == false)
        {
            this.projectLocationTypeNamedAreasRadioButton.prop('checked', true);
            this.disableSelectPointOnMap();
            this.enableLocationEditorMap();
        }

        var selectedProjectLocationAreaId = this.projectLocationAreasDropDown.val();

        SitkaAjax.ajax({
            type: "POST",
            url: @Html.Raw(ViewDataTyped.ProjectLocationAreaGeoJsonUrl.ToJS()),
            data: { projectLocationAreaID: selectedProjectLocationAreaId },
            dataType: "json",
            async: false
        }, function(selectedProjectLocationAreaGeoJson)
        {
            self.selectedProjectAreaLayer = L.geoJson(selectedProjectLocationAreaGeoJson.GeoJsonFeatureCollection);
            self.selectedProjectAreaLayer.setStyle({ color: "red" });
            self.map.addLayer(self.selectedProjectAreaLayer);
            self.map.fitBounds(self.selectedProjectAreaLayer.getBounds());
        }, function()
        {
            alert("There was an error selecting the project location area from list.");
            self.selectedProjectAreaLayer = null;
        });
    };

    ProjectFirmaMaps.Map.prototype.updateLocationInformationOnMap = function (projectLocationInformationContainer, latlng) {
        /*
            <table class="summaryLayout">
                <tr>
                    <th colspan="2">Location Information:</th>
                </tr>
                <tr>
                    <td>Latitude</td>
                    <td>43</td>
                </tr>
                <tr>
                    <td>Longitude</td>
                    <td>190</td>
                </tr>
                <tr>
                    <td>State</td>
                    <td>CA</td>
                </tr>

                <tr>
                    <td>County/City</td>
                    <td>El Dorado</td>
                </tr>

                <tr>
                    <td>Watershed</td>
                    <td>Bijou Creek</td>
                </tr>
            </table>
            */
        var html = "<table class=\"summaryLayout\"><tr><th colspan=\"2\">Location Information</th></tr>";
        html += this.formatLayerProperty("Latitude", L.Util.formatNum(latlng.lat, 4));
        html += this.formatLayerProperty("Longitude", L.Util.formatNum(latlng.lng, 4));
        for (var i = 0; i < this.vectorLayers.length; i++) {
            var match = leafletPip.pointInLayer(
                // the clicked point
                latlng,
                // this layer
                this.vectorLayers[i],
                // whether to stop at first match
                true);
            // if there's overlap, add some content to the popup: the layer name
            // and a table of attributes
            if (match.length) {
                var properties = match[0].feature.properties;
                for (var propertyName in properties) {
                    html += this.formatLayerProperty(propertyName, properties[propertyName]);
                }
            }
        }
        html += "</table>";
        projectLocationInformationContainer.html(html);
    };

    jQuery(document).ready(function()
    {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
        var projectFirmaMap = new ProjectFirmaMaps.Map(mapInitJson);
        projectFirmaMap.initializeProjectLocationEditor();
    });
</script>
