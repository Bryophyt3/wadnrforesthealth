@*-----------------------------------------------------------------------
<copyright file="SpendingBySectorByOrganization.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Sitka Technology Group</author>
<date>Wednesday, February 22, 2017</date>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using LtInfo.Common
@using LtInfo.Common.DhtmlWrappers
@inherits ProjectFirma.Web.Views.Results.SpendingBySectorByOrganization

<div class="panel-body">
    <div style="float: right">@Html.Raw(DhtmlxGridHtmlHelpers.CreateCustomExcelDownloadIconHtml("spendingBySectorAndOrganization", ViewDataTyped.ExcelUrl, "Download Table", "Down this table as Excel file"))</div>
    <br style="clear: both" />
    <table class="gridLayout" style="width: 100%">
        <tr>
            <th style="text-align: left">Organization / Funding Source</th>
            @foreach (var calendarYear in ViewDataTyped.CalendarYears)
            {
                <th>@calendarYear.Value</th>
            }
            <th>Total</th>
        </tr>
        @foreach (var groupedByOrganization in ViewDataTyped.FundingSourceCalendarYearExpenditures.GroupBy(x => x.OrganizationName).OrderBy(x => x.Key))
        {
            <tr style="border: solid black; border-width: 1px 0 1px 1px; background-color: #cecece">
                <td style="text-align: left" colspan="@(ViewDataTyped.CalendarYears.Count + 1)">@Html.Raw(groupedByOrganization.First().OrganizationNameAsUrl)</td>
                <td>@groupedByOrganization.Sum(x => x.CalendarYearExpenditure.Sum(y => y.Value)).ToStringCurrency()</td>
            </tr>
            foreach (var fundingSourceCalendarYearExpenditure in groupedByOrganization.OrderBy(x => x.FundingSourceName))
            {
                <tr>
                    <td style="text-align: left; padding-left: 20px; white-space: nowrap">@fundingSourceCalendarYearExpenditure.FundingSourceNameAsUrl</td>
                    @foreach (var calendarYearExpenditure in fundingSourceCalendarYearExpenditure.CalendarYearExpenditure)
                    {
                        <td>@calendarYearExpenditure.Value.ToStringCurrency()</td>
                    }
                    <td>@fundingSourceCalendarYearExpenditure.CalendarYearExpenditure.Sum(x => x.Value).ToStringCurrency()</td>
                </tr>
            }
        }
        <tr>
            <th style="text-align: left">Grand Total</th>
            @foreach (var calendarYear in ViewDataTyped.CalendarYears)
            {
                <th>
                    @{
                var currentYear = calendarYear;
                    }
                    @ViewDataTyped.FundingSourceCalendarYearExpenditures.Where(x => x.CalendarYearExpenditure.ContainsKey(currentYear.Key)).Select(x => x.CalendarYearExpenditure[currentYear.Key]).Where(x => x.HasValue).Sum(x => x.Value).ToStringCurrency()
                </th>
            }
            <th>@ViewDataTyped.FundingSourceCalendarYearExpenditures.Sum(x => x.CalendarYearExpenditure.Values.Where(y => y.HasValue).Sum(y => y.Value)).ToStringCurrency()</th>
        </tr>
    </table>
</div>
