@*-----------------------------------------------------------------------
<copyright file="SiteLayout.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectCreate
@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.DesignByContract
@using LtInfo.Common.ModalDialog
@using ProjectFirma.Web.Common
@inherits SiteLayout

@{
    SetLayout("~/Views/Shared/SiteLayout.cshtml", ViewDataTyped);
}

@section JavascriptAndStylesContent
{
    
    <style>
        #main-container
        {
            @if (ViewDataTyped.SelectedProposalSection != ProposalSectionEnum.Instructions)
            {
                <text>border-top-left-radius: 6px;</text>
            }
        }
    </style>

    @RenderSection("JavascriptAndStylesContent", false)
}

@if (!ViewDataTyped.ProjectStateIsValidInWizard && ViewDataTyped.Project != null)
{
    <div class="alert alert-info" style="margin-bottom: 10px">
        @if (ViewDataTyped.Project.ProjectApprovalStatus == ProjectApprovalStatus.Approved)
        {
            <span>This @FieldDefinition.Project.GetFieldDefinitionLabel() has been approved and can no longer be edited through this wizard.</span>
        }
        @if (ViewDataTyped.Project.ProjectApprovalStatus == ProjectApprovalStatus.Rejected)
        {
            <span>This @FieldDefinition.Project.GetFieldDefinitionLabel() has been rejected and can no longer be edited through this wizard.</span>
        }
    </div>
}

<div id="projectWizardContent" class="row">
    <div id="tab-container" class="col-sm-4 col-md-3">
        <ul>
            <li style="list-style-type: none" class="@SetSelectedSectionStyle(ProposalSectionEnum.Instructions, ViewDataTyped.SelectedProposalSection)">
                <a href="@ViewDataTyped.ProposalInstructionsUrl">Instructions</a>
            </li>
            <li style="list-style-type: none">
                <hr class="navMenu" />
            </li>
            <li value="1" class="@SetSelectedSectionStyle(ProposalSectionEnum.Basics, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalBasicsUrl">Basics
                        <span class="pull-right statusIcon">
                            @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                        </span>
                    </a>
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects("Basics")
                }
            </li>
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.LocationSimple, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalLocationSimpleUrl">Location - Simple
                        <span class="pull-right statusIcon">
                            @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsProjectLocationSimpleSectionComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                        </span>
                    </a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects("Location - Simple")
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Location - Simple")
                }
                
            </li>
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.LocationDetailed, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalLocationDetailedUrl">Location - Detailed</a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects("Location - Detailed")
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Location - Detailed")
                }
            </li>            
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.Watershed, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalWatershedUrl">@FieldDefinition.Watershed.GetFieldDefinitionLabelPluralized()
                        <span class="pull-right statusIcon">
                            @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsWatershedSectionComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                        </span>
                    </a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects(FieldDefinition.Watershed.GetFieldDefinitionLabelPluralized())
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink(FieldDefinition.Watershed.GetFieldDefinitionLabelPluralized())
                }
            </li>            
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.PerformanceMeasures, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalPerformanceMeasuresUrl">@MultiTenantHelpers.GetPerformanceMeasureNamePluralized()
                        <span class="pull-right statusIcon">
                            @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsPerformanceMeasureSectionComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                        </span>
                    </a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects(MultiTenantHelpers.GetPerformanceMeasureNamePluralized())
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink(MultiTenantHelpers.GetPerformanceMeasureNamePluralized())                    
                }
            </li>
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.ExpectedFunding, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalExpectedFundingUrl">Expected Funding</a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects("Expected Funding")
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Expected Funding")
                }
            </li>
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.Classifications, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalClassificationsUrl">@ViewDataTyped.ClassificationDisplayNamePluralized
                        <span class="pull-right statusIcon">
                            @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsClassificationsComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                        </span>
                    </a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects(ViewDataTyped.ClassificationDisplayNamePluralized)
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink(ViewDataTyped.ClassificationDisplayNamePluralized)
                }

            </li>
            @if (ViewDataTyped.HasAssessments)
            {
                <li class="@SetSelectedSectionStyle(ProposalSectionEnum.Assessment, ViewDataTyped.SelectedProposalSection)">
                    @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                    {
                        <a href="@ViewDataTyped.ProposalAssessmentUrl">Assessment
                            <span class="pull-right statusIcon">
                                @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsAssessmentComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                            </span>
                        </a>
                    }
                    else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                    {
                        @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects("Assessment")
                    }
                    else
                    {
                        @ProjectWizardComponents.MakeDisabledSectionLink("Assessment")
                    }
                </li>
            }
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.Photos, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalPhotosUrl">Photos</a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects("Photos")
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Photos");
                }
            </li>
            <li class="@SetSelectedSectionStyle(ProposalSectionEnum.Notes, ViewDataTyped.SelectedProposalSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete && ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    <a href="@ViewDataTyped.ProposalNotesUrl">Notes</a>
                }
                else if (!ViewDataTyped.ProjectStateIsValidInWizard)
                {
                    @ProjectWizardComponents.MakeDisabledSectionLinkForApprovedAndRejectedProjects("Notes")
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Notes");
                }
            </li>
        </ul>
    </div>

    <div id="main-container" class="col-sm-8 col-md-9">
        @RenderBody()
        @if (ViewDataTyped.SelectedProposalSection != ProposalSectionEnum.Instructions)
        {
            <span><sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup> Required Field</span>
        }
    </div>
</div>

<div class="col-sm-8 col-sm-offset-4 col-md-9 col-md-offset-3">
    <div class="row">
        <div class="col-xs-6">
            <div class="pull-left">
                <p>
                    Created by @ViewDataTyped.Project.ProposingPerson.FullNameFirstLastAndOrgShortName on @ViewDataTyped.Project.ProposingDate
                </p>
            </div>
        </div>
        <div class="col-xs-6">
            <div class="pull-right">
                @if (ViewDataTyped.Project != null)
                {
                    <span>Proposal Status: <span style="font-weight: bold">@ViewDataTyped.Project.ProjectApprovalStatus.ProjectApprovalStatusDisplayName</span></span>
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6">
            <div class="pull-left">
                @if (ViewDataTyped.Project != null)
                {

                    <a class="btn btn-xs btn-firma" style="margin-right: 5px;" href="@ViewDataTyped.ProposalDetailUrl"><span class="glyphicon glyphicon-chevron-left"></span>Detail</a>
                }
                @if (ViewDataTyped.CurrentPersonIsSubmitter && ViewDataTyped.Project != null && ViewDataTyped.Project.ProjectApprovalStatus == ProjectApprovalStatus.PendingApproval)
                {
                    @ModalDialogFormHelper.ModalDialogFormLink("Withdraw this Proposal", ViewDataTyped.WithdrawUrl, "Withdraw Proposal", 500, "Withdraw", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null)
                }
            </div>
        </div>
        <div class="col-xs-6">
            <div class="pull-right">
                @if (ViewDataTyped.Project != null)
                {


                    if (ViewDataTyped.Project.ProjectApprovalStatus.ToEnum == ProjectApprovalStatusEnum.Draft || ViewDataTyped.Project.ProjectApprovalStatus.ToEnum == ProjectApprovalStatusEnum.Returned)
                    {
                        if (ViewDataTyped.CanAdvanceStage)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("Submit", ViewDataTyped.SubmitUrl, "Submit Proposal for review", 500, "Continue", "Cancel", new List<string> { "submitProposal btn btn-xs btn-firma" }, null, null)
                        }
                        else
                        {
                            <button class="btn btn-xs btn-firma" disabled>Submit</button>
                        }
                    }
                    else
                    {
                        if (ViewDataTyped.Project.ProjectApprovalStatus.ToEnum == ProjectApprovalStatusEnum.PendingApproval)
                        {
                            if (ViewDataTyped.CurrentPersonIsApprover)
                            {
                                if (ViewDataTyped.CanAdvanceStage)
                                {
                                    <span style="margin-right: 5px">
                                        @{
                                            var linkText = "<button class='btn btn-xs btn-firma'>" + string.Format("{0} Approve", BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-open")) + "</button>";
                                        }
                                        @ModalDialogFormHelper.ModalDialogFormLink(linkText, ViewDataTyped.ApproveUrl, "Approve Proposal", 400, "Approve", "Cancel", null, null, null)

                                    </span>
                                }
                                else
                                {
                                    <button class="btn btn-xs btn-firma" disabled style="margin-right: 10px">Approve</button>
                                }
                            <span style="margin-right: 5px">
                                @ModalDialogFormHelper.ModalDialogFormLink("Return", ViewDataTyped.ReturnUrl, "Return Proposal to Submitter", 500, "Return", "Cancel", new List<string> { "submitProposal btn btn-xs btn-firma" }, null, null)
                            </span>
                            <span style="margin-right: 5px">
                                @ModalDialogFormHelper.ModalDialogFormLink("Reject", ViewDataTyped.RejectUrl, "Reject Proposal", 500, "Reject", "Cancel", new List<string> { "submitProposal btn btn-xs btn-firma" }, null, null)
                            </span>
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>
