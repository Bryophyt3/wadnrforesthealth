@*-----------------------------------------------------------------------
<copyright file="SiteLayout.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProposedProject
@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.DesignByContract
@using LtInfo.Common.ModalDialog
@using ProjectFirma.Web.Common
@inherits SiteLayout

@{
    SetLayout("~/Views/Shared/SiteLayout.cshtml", ViewDataTyped);
}

@section JavascriptAndStylesContent
{
    
    <style>
        #main-container
        {
            @if (ViewDataTyped.SelectedProposedProjectSection != ProposedProjectSectionEnum.Instructions)
            {
                <text>border-top-left-radius: 6px;</text>
            }
        }
    </style>

    @RenderSection("JavascriptAndStylesContent", false)
}

<div id="projectWizardContent" class="row">
    <div id="tab-container" class="col-sm-4 col-md-3">
        <ol>
            <li style="list-style-type: none" class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.Instructions, ViewDataTyped.SelectedProposedProjectSection)">
                <a href="@ViewDataTyped.ProjectUpdateInstructionsUrl">Instructions</a>
            </li>
            <li style="list-style-type: none">
                <hr class="navMenu" />
            </li>
            <li value="1" class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.Basics, ViewDataTyped.SelectedProposedProjectSection)">
                <a href="@ViewDataTyped.ProjectUpdateBasicsUrl">Basics</a>
                <span class="pull-right statusIcon">
                    @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                </span>
            </li>
            <li class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.LocationSimple, ViewDataTyped.SelectedProposedProjectSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete)
                {
                    <a href="@ViewDataTyped.ProjectUpdateLocationSimpleUrl">Location - Simple</a>
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Location - Simple");
                }
                <span class="pull-right statusIcon">
                    @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsProjectLocationSimpleSectionComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                </span>
            </li>
            <li class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.LocationDetailed, ViewDataTyped.SelectedProposedProjectSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete)
                {
                    <a href="@ViewDataTyped.ProjectUpdateLocationDetailedUrl">Location - Detailed</a>
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Location - Detailed");
                }
            </li>
            <li class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.PerformanceMeasures, ViewDataTyped.SelectedProposedProjectSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete)
                {
                    <a href="@ViewDataTyped.ProjectUpdatePerformanceMeasuresUrl">@MultiTenantHelpers.GetPerformanceMeasureNamePluralized()</a>
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink(MultiTenantHelpers.GetPerformanceMeasureNamePluralized())
                    ;
                }
                <span class="pull-right statusIcon">
                    @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsPerformanceMeasureSectionComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                </span>
            </li>
            <li class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.Classifications, ViewDataTyped.SelectedProposedProjectSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete)
                {
                    <a href="@ViewDataTyped.ProjectUpdateClassificationsUrl">@MultiTenantHelpers.GetClassificationDisplayNamePluralized()</a>
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink(MultiTenantHelpers.GetClassificationDisplayNamePluralized())
                }
                <span class="pull-right statusIcon">
                    @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsClassificationsComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                </span>

            </li>
            @if (ViewDataTyped.HasAssessments)
            {
                <li class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.Assessment, ViewDataTyped.SelectedProposedProjectSection)">
                    @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete)
                    {
                        <a href="@ViewDataTyped.ProjectUpdateAssessmentUrl">Assessment</a>
                    }
                    else
                    {
                        @ProjectWizardComponents.MakeDisabledSectionLink("Assessment")
                    }
                    <span class="pull-right statusIcon">
                        @Html.Raw(ViewDataTyped.ProposalSectionsStatus.IsAssessmentComplete ? ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon : ProjectWizardComponents.RequiredInfoNotProvidedIcon)
                    </span>

                </li>
            }
            <li class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.Photos, ViewDataTyped.SelectedProposedProjectSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete)
                {
                    <a href="@ViewDataTyped.ProjectUpdatePhotosUrl">Photos</a>
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Photos");
                }
            </li>
            <li class="@SetSelectedSectionStyle(ProposedProjectSectionEnum.Notes, ViewDataTyped.SelectedProposedProjectSection)">
                @if (ViewDataTyped.ProposalSectionsStatus.IsBasicsSectionComplete)
                {
                    <a href="@ViewDataTyped.ProjectUpdateNotesUrl">Notes</a>
                }
                else
                {
                    @ProjectWizardComponents.MakeDisabledSectionLink("Notes");
                }
            </li>
        </ol>
    </div>

    <div id="main-container" class="col-sm-8 col-md-9">
        @RenderBody()
        @if (ViewDataTyped.SelectedProposedProjectSection != ProposedProjectSectionEnum.Instructions)
        {
            <span><sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup> Required Field</span>
        }
    </div>
</div>

<div class="row">
    <div class="col-sm-8 col-sm-offset-4 col-md-9 col-md-offset-3">
        <div class="pull-right">
            @if (ViewDataTyped.ProposedProject != null)
            {
                <span style="margin-right: 20px">Proposal Status: <span style="font-weight: bold">@ViewDataTyped.ProposedProject.ProposedProjectState.ProposedProjectStateDisplayName</span></span>

                switch (ViewDataTyped.ProposedProject.ProposedProjectState.ToEnum)
                {
                    case ProposedProjectStateEnum.Draft:
                        if (ViewDataTyped.CanAdvanceStage)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("Submit", ViewDataTyped.SubmitUrl, "Submit Proposal for review", 500, "Continue", "Cancel", new List<string> { "submitProposal btn btn-xs btn-firma" }, null, null)
                        }
                        else
                        {
                            <button class="btn btn-xs btn-firma" disabled>Submit</button>
                        }
                        break;
                    case ProposedProjectStateEnum.Submitted:
                        if (ViewDataTyped.CurrentPersonIsApprover)
                        {
                            if (ViewDataTyped.CanAdvanceStage)
                            {
                                <span style="margin-right: 5px">
                                    @{
                                var linkText = "<button class='btn btn-xs btn-firma'>" + string.Format("{0} Approve", BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-open")) + "</button>";
                                @ModalDialogFormHelper.ModalDialogFormLink(linkText, ViewDataTyped.ApproveUrl, "Approve Proposal", 400, "Approve", "Cancel", null, null, null)
                                    }
                                </span>
                            }
                            else
                            {
                                <button class="btn btn-xs btn-firma" disabled style="margin-right: 10px">Approve</button>
                            }
                            <span style="margin-right: 5px">
                                @ModalDialogFormHelper.ModalDialogFormLink("Return", ViewDataTyped.ReturnUrl, "Return Proposal to Submitter", 500, "Return", "Cancel", new List<string> { "submitProposal btn btn-xs btn-firma" }, null, null)
                            </span>
                            <span style="margin-right: 5px">
                                @ModalDialogFormHelper.ModalDialogFormLink("Reject", ViewDataTyped.RejectUrl, "Reject Proposal", 500, "Reject", "Cancel", new List<string> { "submitProposal btn btn-xs btn-firma" }, null, null)
                            </span>
                        }
                        else if (ViewDataTyped.CurrentPersonIsSubmitter)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("Withdraw", ViewDataTyped.WithdrawUrl, "Withdraw Proposal", 500, "Withdraw", "Cancel", new List<string> { "submitProposal btn btn-xs btn-firma" }, null, null)
                        }
                        break;

                    case ProposedProjectStateEnum.Approved:
                        Check.Assert(ViewDataTyped.ProjectStateIsValidInWizard, "This proposal has already been approved.");
                        break;
                    case ProposedProjectStateEnum.Rejected:
                        Check.Assert(ViewDataTyped.ProjectStateIsValidInWizard, "This proposal has already been rejected.");
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
        </div>

        <a class="btn btn-xs btn-firma" style="margin-right: 5px;" href="@ViewDataTyped.ProposedProjectListUrl"><span class="glyphicon glyphicon-chevron-left"></span>Index</a>
        @ModalDialogFormHelper.ModalDialogFormLink("<span class='glyphicon glyphicon-comment'></span> Provide Feedback", ViewDataTyped.ProvideFeedbackUrl, "Provide Feedback", 800, "Submit Request", "Cancel", new List<string> { "btn", "btn-xs", "btn-firma" }, null, null)
    </div>
</div>
