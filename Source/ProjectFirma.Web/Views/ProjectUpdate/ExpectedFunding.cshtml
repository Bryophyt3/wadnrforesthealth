@*-----------------------------------------------------------------------
    <copyright file="ExpectedFunding.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectFunding
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@inherits ExpectedFunding

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpectedFundingController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model)),
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                };
            });

            // ]]>
        </script>
    }
}

@if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}



    <p>Enter the expected funding for your @FieldDefinition.Project.GetFieldDefinitionLabel(). You may enter multiple grant allocations. For each grant allocation, provide the amount of funding that has been secured, and the amount that is targeted but not yet secured. If the amount of secured or unsecured funding is unknown, you can leave the amounts blank.</p>
    <p>The Unfunded Need is the difference between the @FieldDefinition.Project.GetFieldDefinitionLabel()'s Estimated Total Cost and the Secured Funding.</p>

<hr />

@if (!ViewDataTyped.IsEditable)
{
    ProjectFundingDetail.RenderPartialView(Html, ViewDataTyped.ProjectFundingDetailViewData);
}
else if (ViewDataTyped.AreProjectBasicsValid)
{
    using (Html.BeginForm())
    {
        <div ng-app="ProjectFirmaApp" ng-controller="ExpectedFundingController">
            <div class="form-group row">
                <div class="col-md-4 text-right">@Html.LabelWithSugarFor(m => m.ProjectEstimatedIndirectCost)</div>
                <div class="col-md-8">
                    @Html.EditorFor(m => m.ProjectEstimatedIndirectCost)
                    @Html.ValidationMessageFor(x => x.ProjectEstimatedIndirectCost)
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-4 text-right">@Html.LabelWithSugarFor(m => m.ProjectEstimatedPersonnelAndBenefitsCost)</div>
                <div class="col-md-8">
                    @Html.EditorFor(m => m.ProjectEstimatedPersonnelAndBenefitsCost)
                    @Html.ValidationMessageFor(x => x.ProjectEstimatedPersonnelAndBenefitsCost)
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-4 text-right">@Html.LabelWithSugarFor(m => m.ProjectEstimatedSuppliesCost)</div>
                <div class="col-md-8">
                    @Html.EditorFor(m => m.ProjectEstimatedSuppliesCost)
                    @Html.ValidationMessageFor(x => x.ProjectEstimatedSuppliesCost)
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-4 text-right">@Html.LabelWithSugarFor(m => m.ProjectEstimatedTravelCost)</div>
                <div class="col-md-8">
                    @Html.EditorFor(m => m.ProjectEstimatedTravelCost)
                    @Html.ValidationMessageFor(x => x.ProjectEstimatedTravelCost)
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-4 text-right">@Html.LabelWithSugarFor(m => m.ProjectEstimatedTotalCost)</div>
                <div class="col-md-8">
                    @Html.EditorFor(m => m.ProjectEstimatedTotalCost)
                    @Html.ValidationMessageFor(x => x.ProjectEstimatedTotalCost)
                </div>
            </div>
            <hr/>
            <div ng-repeat="projectGrantAllocationRequest in AngularModel.ProjectGrantAllocationRequests | orderBy:[getGrantAllocationName]">
                <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationRequests[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationRequest.ProjectID}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationRequests[0].GrantAllocationID).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationRequest.GrantAllocationID}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationRequests[0].SecuredAmount).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationRequest.SecuredAmount}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationRequests[0].UnsecuredAmount).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationRequest.UnsecuredAmount}}"/>
            </div>
            <div class="form-group">
                <label class="control-label">@FieldDefinition.GrantAllocation.GetFieldDefinitionLabel() to Add:</label>
                <div class="input-group">
                    <select ng-model="GrantAllocationToAdd"
                            data-live-search="true"
                            data-container="body"
                            data-title="Select a Grant Allocation to Add"
                            data-width="100%" class="selectpicker"
                            data-ng-options="grantAllocation as grantAllocation.DisplayName for grantAllocation in filteredGrantAllocationSimples() track by grantAllocation.GrantAllocationID">
                        <option value="null" disabled selected>Select a @FieldDefinition.GrantAllocation.GetFieldDefinitionLabel() to Add</option>
                    </select>
                    <span class="input-group-btn">
                        <button class="btn btn-firma" type="button" ng-click="addRow()">
                            <span class="glyphicon glyphicon-plus"></span> Add
                        </button>
                    </span>
                </div>
                <p style="font-size: 12px;">
                    Grant Allocation not listed?
                    @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestGrantAllocationUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
                </p>
            </div>
            <div style="overflow-x: auto" class="form-inline">
                <table class="table" style="margin-top: 20px; overflow: scroll" ng-show="AngularModel.ProjectGrantAllocationRequests.length > 0">
                    <tr>
                        <th></th>
                        <th>@Html.LabelWithSugarFor(FieldDefinition.GrantAllocation)</th>
                        <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinition.SecuredFunding)</th>
                        <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinition.UnsecuredFunding)</th>
                        <th style="text-align: right">Total</th>
                    </tr>
                    <tr ng-repeat="projectGrantAllocationRequest in AngularModel.ProjectGrantAllocationRequests | orderBy:[getGrantAllocationName]">
                        <td>
                            <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectGrantAllocationRequest)" style="cursor: pointer"></span>
                        </td>
                        <td ng-bind="getGrantAllocationName(projectGrantAllocationRequest)"></td>
                        <td style="text-align: right">
                            <input type="text" style="text-align: right" ng-model="projectGrantAllocationRequest.SecuredAmount" class="sitkaCurrency form-control " ng-currency/>
                        </td>
                        <td style="text-align: right">
                            <input type="text" style="text-align: right" ng-model="projectGrantAllocationRequest.UnsecuredAmount" class="sitkaCurrency form-control" ng-currency/>
                        </td>
                        <th style="text-align: right">
                            {{ getRowTotal(projectGrantAllocationRequest) | currency:"$"}}
                        </th>
                    </tr>
                    <tr>
                        <th colspan="2">Total</th>
                        <th style="text-align: right">
                            {{ getSecuredTotal() | currency:"$"}}
                        </th>
                        <th style="text-align: right">
                            {{ getUnsecuredTotal() | currency:"$"}}
                        </th>
                        <th style="text-align: right">
                            {{getTotal() | currency:"$"}}
                        </th>
                    </tr>
                </table>
            </div>
            <hr/>
            <div style="margin: 10px 0px; padding: 5px 10px;">
                <p>
                    <label class="control-label">Summary of Total @FieldDefinition.Project.GetFieldDefinitionLabel() Costs and Funding:</label>
                </p>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.EstimatedIndirectCost):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ AngularViewData.EstimatedIndirectCost | currency:"$"}}
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.EstimatedPersonnelAndBenefitsCost):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ AngularViewData.EstimatedPersonnelAndBenefitsCost | currency:"$"}}
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.EstimatedSuppliesCost):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ AngularViewData.EstimatedSuppliesCost | currency:"$"}}
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.EstimatedTravelCost):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ AngularViewData.EstimatedTravelCost | currency:"$"}}
                        </span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.EstimatedTotalCost):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ AngularViewData.EstimatedTotalCost | currency:"$"}}
                        </span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.SecuredFunding):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{getSecuredTotal() | currency:"$"}}
                        </span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.UnfundedNeed):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ (AngularViewData.EstimatedTotalCost - getSecuredTotal()) | currency:"$"}}
                        </span>
                    </div>
                    <div class="col-sm-5 text-right" ng-show="getUnsecuredTotal() > 0">
                        (
                        <span>
                            {{(getUnsecuredTotal()) | currency:"$"}}
                        </span> identified as @Html.LabelWithSugarFor(FieldDefinition.UnsecuredFunding))
                    </div>
                </div>
            </div>

            @if (ViewDataTyped.ShowApproveAndReturnButton)
            {
                <hr/>
                <div class="row form-group">
                    <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                    <div class="col-md-9">
                        @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> {{"style", "width: 100%"}, {"class", "form-control"}})
                    </div>
                </div>
            }
            <hr/>
            @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> {"btn btn-xs btn-firma"}, null, null, null, "Undo all changes on this page")
                        @if (ViewDataTyped.UpdateStatus.IsExpectedFundingUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Expenditures", FieldDefinition.Project.GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> {"btn btn-xs btn-firma"}, null, null, null)
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                    </td>
                </tr>
            </table>

        </div>
    }
}



<script type="text/javascript">
    //<![CDATA[
    jQuery(document).ready(function () { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
    // ]]>
</script>