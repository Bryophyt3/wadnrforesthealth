@*-----------------------------------------------------------------------
<copyright file="ExpectedFunding.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectFunding
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@inherits ExpectedFunding

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpectedFundingController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model)),
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                };
            });
            jQuery(document).ready(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
            // ]]>
        </script>
    }
}

@if (!ViewDataTyped.AreProjectBasicsValid)
{
<div class="alert alert-danger">
    @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
</div>
}



<p >Enter the expected funding for your project. You may enter multiple funding sources. For each funding source, provide the amount of funding that has been secured, and the amount that is targeted but not yet secured.</p>
<p>The Unfunded Need is the difference between the project's Estimated Total Cost (as entered on the Basics page) and the Secured Funding.</p>

<hr />

@if (!ViewDataTyped.IsEditable)
{
    ProjectFundingDetail.RenderPartialView(Html, ViewDataTyped.ProjectFundingDetailViewData);
}
else if (ViewDataTyped.AreProjectBasicsValid)
{
    using (Html.BeginForm())
    {
        <div ng-app="ProjectFirmaApp" ng-controller="ExpectedFundingController" >
            <div style="display: inline-block; margin-right: 5px; vertical-align: top">
                @FieldDefinition.FundingSource.GetFieldDefinitionLabel() to Add:
            </div>
            <div class="input-group">
                <select ng-model="FundingSourceToAdd"
                        class="selectpicker"
                        data-live-search="true"
                        data-container="body"
                        ng-options="fundingSource.DisplayName group by fundingSource.OrganizationName for fundingSource in filteredFundingSources()"
                        data-width="70%">
                    <option value="null" disabled selected>Select a Funding Source to Add</option>
                </select>
                <button class="btn btn-firma" type="button" style="margin-left: 5px;" ng-click="addRow()">Add</button>
                <span style="vertical-align: middle; display: inline-block; margin-left: 5px">
                    Not listed?
                    @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestFundingSourceUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
                </span>
                <br />
            </div>
            <div style="overflow-x: auto" class="form-inline">
                <table class="table" style="margin-top: 20px; overflow: scroll" ng-show="AngularModel.ProjectFundingSourceRequests.length > 0">
                    <tr>
                        <th></th>
                        <th>@Html.LabelWithSugarFor(FieldDefinition.FundingSource)</th>
                        <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinition.SecuredFunding)</th>
                        <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinition.UnsecuredFunding)</th>
                        <th style="text-align: right">Total</th>
                    </tr>
                    <tr ng-repeat="projectFundingSourceRequest in AngularModel.ProjectFundingSourceRequests | orderBy:[getFundingSourceName]">
                        <td>
                            <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectFundingSourceRequest)" style="cursor: pointer"></span>
                        </td>
                        <td ng-bind="getFundingSourceName(projectFundingSourceRequest)"></td>
                        <td style="text-align: right">
                            <input type="text" ng-model="projectFundingSourceRequest.SecuredAmount" class="sitkaCurrency form-control " ng-currency />
                        </td>
                        <td style="text-align: right">
                            <input type="text" ng-model="projectFundingSourceRequest.UnsecuredAmount" class="sitkaCurrency form-control" ng-currency />
                        </td>
                        <th style="text-align: right" ng-bind="(projectFundingSourceRequest.SecuredAmount + projectFundingSourceRequest.UnsecuredAmount) | nfcurrency"></th>
                    </tr>
                    <tr>
                        <th colspan="2">Total</th>
                        <th style="text-align: right" ng-bind="getSecuredTotal() | nfcurrency">
                        </th>
                        <th style="text-align: right" ng-bind="getUnsecuredTotal() | nfcurrency">
                        </th>
                        <th style="text-align: right" ng-bind="(getSecuredTotal() + getUnsecuredTotal()) | nfcurrency">
                        </th>
                    </tr>
                </table>
            </div>
            <hr />
            <div style="margin: 10px 0px; padding: 5px 10px;">
                <p>
                    <label class="control-label">Summary of Total Project Costs and Funding:</label>
                </p>
                @if (ViewDataTyped.Project.FundingType == FundingType.OperationsAndMaintenance)
                {
                    <table>
                        <tr>
                            <td style="width: 200px">
                                Estimated Annual Operating Cost:
                            </td>
                            <td>
                                <span>@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.EstimatedAnnualOperatingCost.ToStringCurrency()</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="text-right">
                                Estimated Total Operating Cost:
                            </td>
                        </tr>
                    </table>
                }
                else
                {
                    <div class="row">
                        <div class="col-sm-3">@Html.LabelWithSugarFor(FieldDefinition.EstimatedTotalCost):</div>
                        <div class="col-sm-3 text-right">
                            <span ng-bind="AngularViewData.EstimatedTotalCost | nfcurrency"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-3">@Html.LabelWithSugarFor(FieldDefinition.SecuredFunding):</div>
                        <div class="col-sm-3 text-right">
                            <span ng-bind="getSecuredTotal() | nfcurrency"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-3">@Html.LabelWithSugarFor(FieldDefinition.UnfundedNeed):</div>
                        <div class="col-sm-3 text-right">
                            <span ng-bind="(AngularViewData.EstimatedTotalCost - getSecuredTotal()) | nfcurrency"></span>
                        </div>
                        <div class="col-sm-6 text-right" ng-show="getUnsecuredTotal() > 0">
                            (<span ng-bind="(getUnsecuredTotal()) | nfcurrency"></span> identified as @Html.LabelWithSugarFor(FieldDefinition.UnsecuredFunding))
                        </div>
                    </div>
                }
            </div>



            <div ng-repeat="projectFundingSourceRequest in AngularModel.ProjectFundingSourceRequests | orderBy:[getFundingSourceName]">
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceRequests[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceRequest.ProjectID}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceRequests[0].FundingSourceID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceRequest.FundingSourceID}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceRequests[0].SecuredAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceRequest.SecuredAmount}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceRequests[0].UnsecuredAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceRequest.UnsecuredAmount}}"/>
            </div>

            @if (ViewDataTyped.ShowApproveAndReturnButton)
            {
                <hr />
                <div class="row form-group">
                    <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                    <div class="col-md-9">
                        @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> { { "style", "width: 100%" }, { "class", "form-control" } })
                        @Html.Hidden("Section", ViewDataTyped.SelectedProjectUpdateSection)
                    </div>
                </div>
            }
            <hr />
            @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null, null, "Undo all changes on this page")
                        @if (ViewDataTyped.UpdateStatus.IsExpectedFundingUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Expenditures", FieldDefinition.Project.GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null)
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                    </td>
                </tr>
            </table>

        </div>
    }
}