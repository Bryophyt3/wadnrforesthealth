@*-----------------------------------------------------------------------
<copyright file="SiteLayout.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common
@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.ModalDialog
@using ProjectFirma.Web.Common
@inherits SiteLayout

@{
 // ReSharper disable once MustUseReturnValue
    SetLayout("~/Views/Shared/SiteLayout.cshtml", ViewDataTyped);
}

@section JavascriptAndStylesContent
{
    <style>
        #main-container
        {
            @if (ViewDataTyped.CurrentSection != ProjectUpdateSection.Instructions)
            {
                <text>border-top-left-radius: 6px;</text>
            }

        }
    </style>

    @RenderSection("JavascriptAndStylesContent", false)
}

@if (Html.ViewData.ModelState.IsValid && ViewDataTyped.ValidationWarnings.Any())
{
    <div class="alert alert-warning">
        <ul>
            @foreach (string warning in ViewDataTyped.ValidationWarnings)
            {
                <li>
                    <span>@warning</span>
                </li>
            }
        </ul>
    </div>
}

<div id="projectWizardContent" class="row">
    <div id="tab-container" class="col-sm-4 col-md-3">
        <ul>
            @foreach (var projectUpdateSection in ViewDataTyped.ProjectUpdateSections)
            {
                <li class="@(ViewDataTyped.CurrentSection == projectUpdateSection ? "selected" : "selectable")">
                    <a href="@(projectUpdateSection.GetSectionUrl(ViewDataTyped.Project))"
                       class="@(projectUpdateSection.GetSectionUrl(ViewDataTyped.Project) == null ? "disabled" : "")">
                        @if (projectUpdateSection.HasCompletionStatus && projectUpdateSection.GetSectionUrl(ViewDataTyped.Project) != null)
                        {
                            if (projectUpdateSection.IsComplete(ViewDataTyped.ProjectUpdateBatch))
                            {
                                <span class="pull-right statusIcon">
                                    @Html.Raw(ProjectWizardComponents.RequiredInfoOkSubmitReadyIcon)
                                </span>
                            }
                            else
                            {
                                <span class="pull-right statusIcon">@Html.Raw(ProjectWizardComponents.RequiredInfoNotProvidedIcon)</span>
                            }
                        }

                        @projectUpdateSection.ProjectUpdateSectionDisplayName
                        @if (projectUpdateSection.SectionIsUpdated(ViewDataTyped.UpdateStatus) && projectUpdateSection.GetSectionUrl(ViewDataTyped.Project) != null)
                        {
                            <span style="margin-left: 4px">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-flag", "Section has been updated")</span>
                        }
                    </a>
                </li>
            }
        </ul>

    </div>
    <div id="main-container" class="col-sm-8 col-md-9">
        @RenderBody()
        @if (ViewDataTyped.CurrentSection != ProjectUpdateSection.Instructions)
        {
            <span><sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup> Required Field</span>
        }
    </div>
</div>

<div class="col-sm-8 col-sm-offset-4 col-md-9 col-md-offset-3">
    <div class="row">
        <div class="col-sm-12" style="padding-left: 0;">
            <div class="pull-left">
                @if (ViewDataTyped.ProjectUpdateBatch.IsSubmitted)
                {
                    <span>Submitted by @ViewDataTyped.ProjectUpdateBatch.LatestProjectUpdateHistorySubmitted.UpdatePerson.FullNameFirstLastAndOrgShortName on @ViewDataTyped.ProjectUpdateBatch.LatestProjectUpdateHistorySubmitted.TransitionDate.ToStringDateTime()</span>
                }
                else if (ViewDataTyped.ProjectUpdateBatch.IsReturned)
                {
                    <span>Returned by @ViewDataTyped.ProjectUpdateBatch.LatestProjectUpdateHistoryReturned.UpdatePerson.FullNameFirstLastAndOrg on @ViewDataTyped.ProjectUpdateBatch.LatestProjectUpdateHistoryReturned.TransitionDate.ToStringDateTime()</span>
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-9 col-md-9 col-xs-9" style="padding-left: 0; padding-bottom: 10px;">
            <div class="pull-left">
                <a class="btn btn-xs btn-firma" href="@ViewDataTyped.Project.GetDetailUrl()"><span class="glyphicon glyphicon-chevron-left"></span>Detail</a>
                @ModalDialogFormHelper.ModalDialogFormLink("Delete this Update", ViewDataTyped.DeleteProjectUpdateUrl, "Delete Project Update", 800, "Continue", "Cancel", new List<string> {"btn", "btn-xs", "btn-firma"}, null, null)
                @BootstrapHtmlHelpers.MakeModalDialogAlertLinkFromUrl(ViewDataTyped.ProjectUpdateHistoryUrl, "History", "Close", "Show Update History", new List<string> {"btn btn-xs btn-firma"}, null)
            </div>
        </div>
        <div class="col-sm-3 col-md-3 col-xs-3">
            <div class="pull-right">
                @if (ViewDataTyped.ProjectUpdateBatch.IsReadyToSubmit)
                {
                    @ModalDialogFormHelper.ModalDialogFormLink("Submit", ViewDataTyped.SubmitUrl, string.Format("Submit {0} {1} for review", FieldDefinition.Project.GetFieldDefinitionLabel(), ViewDataTyped.Project.DisplayName), 500, "Continue", "Cancel", new List<string> {"submitProject btn btn-xs btn-firma"}, null, null)
                }
                else if (ViewDataTyped.ShowApproveAndReturnButton)
                {
                    @ModalDialogFormHelper.ModalDialogFormLink("Return", ViewDataTyped.ReturnUrl, string.Format("Return {0} Updates for {0} {1}", FieldDefinition.Project.GetFieldDefinitionLabel(), ViewDataTyped.Project.DisplayName), 500, "Continue", "Cancel", new List<string> {"submitProject btn btn-xs btn-firma"}, null, null)
                    if (ViewDataTyped.IsReadyToApprove)
                    {
                        <span>
                            @ModalDialogFormHelper.ModalDialogFormLink("Approve", ViewDataTyped.ApproveUrl, string.Format("Approve {0} Updates for {0} {1}", FieldDefinition.Project.GetFieldDefinitionLabel(), ViewDataTyped.Project.DisplayName), 500, "Continue", "Cancel", new List<string> {"submitProject btn btn-xs btn-firma"}, null, null)
                        </span>
                    }
                    else
                    {
                        <button class="btn btn-xs btn-firma" disabled="disabled">Approve</button>
                    }
                }
                else if (ViewDataTyped.IsEditable)
                {
                    <button class="btn btn-xs btn-firma" disabled="disabled">Submit</button>
                }
            </div>
        </div>
    </div>
</div>