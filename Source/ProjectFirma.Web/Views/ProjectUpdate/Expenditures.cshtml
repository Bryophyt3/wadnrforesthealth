@*-----------------------------------------------------------------------
<copyright file="Expenditures.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using ProjectFirma.Web.Views.Shared.ExpenditureAndBudgetControls
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@inherits Expenditures

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpendituresController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model)),
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                    };
            });
            jQuery(document).ready(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
            // ]]>
        </script>
    }
}

To enter your project's annual expenditures, add the appropriate @FieldDefinition.FundingSource.GetFieldDefinitionLabelPluralized() and then enter the amount contributed by each for the duration defined by your project's Planning / Design Start and @FieldDefinition.CompletionYear.GetFieldDefinitionLabel()
(or, if @FieldDefinition.CompletionYear.GetFieldDefinitionLabel() isn't set, through the current year). If your project had no expenditures for a given year, enter zero "0" for that year for at least one of its @FieldDefinition.FundingSource.GetFieldDefinitionLabelPluralized().
<hr />
<div style="margin: 10px 0">
    <p>
        Other financial information for this project that might be helpful:
    </p>

    @if (ViewDataTyped.Project.FundingType == FundingType.Capital)
    {
        <div style="width: 300px">@FieldDefinition.EstimatedTotalCost.GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.EstimatedTotalCost.ToStringCurrency()</span></div>
        <div style="width: 300px">@FieldDefinition.SecuredFunding.GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.SecuredFunding.ToStringCurrency()</span></div>
        <div style="width: 300px">@FieldDefinition.UnfundedNeed.GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.UnfundedNeed.ToStringCurrency()</span></div>
    }
    else if (ViewDataTyped.Project.FundingType == FundingType.OperationsAndMaintenance)
    {
        <table>
            <tr>
                <td style="width: 200px">
                   @FieldDefinition.EstimatedAnnualOperatingCost.GetFieldDefinitionLabel():
                </td>
                <td>
                    <span style="font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.EstimatedAnnualOperatingCost.ToStringCurrency()</span>
                </td>
            </tr>
            <tr>
                <td>
                    Estimated Total Operating Cost:
                </td>
                @if (CostParameterSet.CanCalculateTotalRemainingOperatingCostInYearOfExpenditure(ViewDataTyped.ProjectUpdateBatch.ProjectUpdate))
                {
                    <td>
                        <span style="font-weight: bold">@ViewDataTyped.TotalOperatingCostInYearOfExpenditure.ToStringCurrency()</span> (For years @ViewDataTyped.StartYearForTotalOperatingCostCalculation-@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.CompletionYear using @ViewDataTyped.InflationRate.ToStringPercent() annual inflation)
                    </td>
                }
            </tr>
        </table>
    }
</div>

@if (!ViewDataTyped.IsEditable)
{
    ProjectExpendituresDetail.RenderPartialView(Html, ViewDataTyped.ProjectExpendituresDetailViewData);
}
else if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}
else
{
    using (Html.BeginForm())
    {
        <div ng-app="ProjectFirmaApp" ng-controller="ExpendituresController" style="overflow-x: auto">
            <div style="display: inline-block; margin-right: 5px; vertical-align: top">
                @FieldDefinition.FundingSource.GetFieldDefinitionLabel() to Add:
            </div>
            <div style="display: inline-block">
                <select ng-model="FundingSourceToAdd" ng-options="fundingSource.DisplayName group by fundingSource.OrganizationName for fundingSource in filteredFundingSources()" style="width: 500px"></select>
                <button class="btn btn-xs btn-firma" type="button" ng-click="addRow()">Add</button>
                <span style="vertical-align: middle; display: inline-block; margin-left: 5px">
                    Not listed?
                    @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestFundingSourceUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
                </span>
                <br />
                <label style="font-size: 12px"><input type="checkbox" ng-model="ShowOnlyProjectFunders" /> Show only my project's @FieldDefinition.Funder.GetFieldDefinitionLabelPluralized()</label>
            </div>
            <table class="table" style="margin-top: 20px; overflow: scroll" ng-show="AngularModel.ProjectFundingSourceExpenditures.length > 0">
                <thead>
                    <tr>
                        <th class="fit"></th>
                        <th class="fit">@Html.LabelWithSugarFor(FieldDefinition.FundingSource)</th>
                        <th class="fit" ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right; vertical-align: top">
                            <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear - 1)" ng-show="$first && calendarYear > 2007" title="Add Previous Year '{{calendarYear - 1}}'" alt="Add Previous Year '{{calendarYear - 1}}'" style="cursor: pointer"></span>
                            <span ng-bind="calendarYear"></span>
                            <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear + 1)" ng-show="$last && calendarYear < AngularViewData.MaxYear" title="Add Next Year '{{calendarYear + 1}}'" alt="Add Next Year '{{calendarYear + 1}}'" style="cursor: pointer"></span>
                        </th>
                        <th style="text-align: right">Total</th>
                    </tr>
                </thead>
                <tr class="fit" ng-repeat="projectFundingSourceExpenditure in AngularModel.ProjectFundingSourceExpenditures | orderBy:[getFundingSourceName]">
                    <td class="fit">
                        <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectFundingSourceExpenditure)" style="cursor: pointer"></span>
                    </td>
                    <td class="fit" ng-bind="getFundingSourceName(projectFundingSourceExpenditure)">
                    <td style="text-align: right" ng-repeat="calendarYearExpenditure in projectFundingSourceExpenditure.CalendarYearExpenditures | orderBy:'CalendarYear'">
                        <input type="text" style="width: 80px; text-align: right;" ng-model="calendarYearExpenditure.MonetaryAmount" class="sitkaCurrency" ng-currency />
                    </td>
                    <th style="text-align: right" ng-bind="getExpenditureTotalForRow(projectFundingSourceExpenditure) | nfcurrency">
                    </th>
                </tr>
                <tr>
                    <th colspan="2">Total:</th>
                    <th ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right" ng-bind="getExpenditureTotalForCalendarYear(calendarYear) | nfcurrency">
                    </th>
                    <th style="text-align: right" ng-bind="getExpenditureTotalForCalendarYear() | nfcurrency">
                    </th>
                </tr>
            </table>

            <div ng-repeat="projectFundingSourceExpenditure in AngularModel.ProjectFundingSourceExpenditures | orderBy:[getFundingSourceName]">
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceExpenditure.ProjectID}}" />
                <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].FundingSourceID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceExpenditure.FundingSourceID}}" />
                <div ng-repeat="calendarYearExpenditure in projectFundingSourceExpenditure.CalendarYearExpenditures | orderBy:'CalendarYear'">
                    <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].CalendarYearExpenditures[1].CalendarYear).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{calendarYearExpenditure.CalendarYear}}" />
                    <input type="hidden" name="@Html.NameFor(x => x.ProjectFundingSourceExpenditures[0].CalendarYearExpenditures[1].MonetaryAmount).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{calendarYearExpenditure.MonetaryAmount}}" />
                </div>
            </div>

            @if (ViewDataTyped.ShowApproveAndReturnButton)
            {
                <hr />
                <div class="row form-group">
                    <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                    <div class="col-md-9">
                        @Html.TextAreaFor(x => x.Comments, new { @class = "sectionComments" })
                        @Html.Hidden("Section", ViewDataTyped.SelectedProjectUpdateSection)
                    </div>
                </div>
            }
            <hr />
            @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("Refresh", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null)
                        @if (ViewDataTyped.UpdateStatus.IsExpendituresUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Expenditures", FieldDefinition.Project.GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "diff-close-button", "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null, new List<string>() { "btn-firma", "btn-xs" })
                        }
                    </td>
                    <td>
                        @if (ViewDataTyped.ViewDataForAngular.ValidationWarnings.Any())
                        {
                            <div data-ng-show="AngularModel.ShowValidationWarnings" data-ng-class="AngularModel.ShowValidationWarnings ? 'alert alert-danger' : 'hidden'">
                                <ul>
                                    <li data-ng-repeat="warning in AngularViewData.ValidationWarnings">
                                        <span data-ng-bind="warning"></span>
                                    </li>
                                </ul>
                            </div>
                        }
                        else
                        {
                            <div ng-show="AngularModel.ShowValidationWarnings" data-ng-class="AngularModel.ShowValidationWarnings ? 'alert alert-success' : 'hidden'">
                                <span>This page is all set!  Nice work.  You should take the rest of the day off.</span>
                            </div>
                        }

                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        @Html.CheckBoxFor(x => x.ShowValidationWarnings, new { data_ng_model = "AngularModel.ShowValidationWarnings", @class = "ignoreSerialization" })
                        @Html.LabelWithSugarFor(x => x.ShowValidationWarnings)
                        <button class="btn btn-xs btn-firma" type="submit" ng-disabled="pmForm.$invalid" style="margin-left: 10px">Save</button>
                    </td>
                </tr>
            </table>
        </div>
    }
}
