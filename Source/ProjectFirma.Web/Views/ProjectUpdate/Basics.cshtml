@*-----------------------------------------------------------------------
    <copyright file="Basics.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using LtInfo.Common.Views
@inherits Basics

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable)
    {
        <script type="text/javascript">
            // <![CDATA[
            jQuery(document).ready(function () { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
            // ]]>
        </script>
    }
}

<p>
    Update your @FieldDefinition.Project.GetFieldDefinitionLabel()’s basic information here. If this @FieldDefinition.Project.GetFieldDefinitionLabel() is complete, be sure to set the stage to "Complete" or "Post-Implementation"
    from the @FieldDefinition.ProjectStage.GetFieldDefinitionLabel() dropdown. Changes made here will not take effect until a review approves your updates.
</p>
<hr />
@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.ProjectID)
    @Html.HiddenFor(m => m.ProjectTypeID)
    <div class="form-horizontal">
        <div class="row form-group form-group-condensed">
            <div class="col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.ProjectDescription, false)
            </div>
            <div class="col-sm-8" style="padding-left: 10px;">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.TextAreaWithMaxLengthFor(m => m.ProjectDescription, new TextAreaForExtensions.TextAreaDimensions(null, 6), null, new List<string> { "form-control" }, false)
                    @Html.ValidationMessageFor(m => m.ProjectDescription)
                }
                else
                {
                    <div style="width: 464px">
                        @Html.Raw(ViewDataTyped.ProjectUpdate.ProjectDescription.HtmlEncodeWithBreaks())
                    </div>
                }
            </div>
        </div>
        <div class="row form-group form-group-condensed">
            <div class="col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.ProjectStageID, true)
            </div>
            <div class="col-sm-8" style="padding-left: 10px;">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.ProjectStageID, ViewDataTyped.ProjectStages, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                    @Html.ValidationMessageFor(m => m.ProjectStageID)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.ProjectStage.ProjectStageDisplayName
                }
                <div>
                    <p class="systemText">To change the @FieldDefinition.Project.GetFieldDefinitionLabel() stage to a stage not listed, @ModalDialogFormHelper.ModalDialogFormLink("contact support", ViewDataTyped.RequestSupportUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null).</p>
                </div>
            </div>
        </div>
        <div class="form-group form-group-condensed">
            <div class="col-sm-4 control-label">
                @Html.LabelWithSugarFor(FieldDefinition.ProjectInitiationDate, LabelWithSugarForExtensions.DisplayStyle.HelpIconOnly) <strong>Start/Approval Date</strong>
            </div>
            <div class="col-sm-8">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.EditorFor(m => m.PlannedDate, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                    @Html.ValidationMessageFor(m => m.PlannedDate)
                }
                else
                {
                    <p class="form-control-static">@ViewDataTyped.ProjectUpdate.GetPlannedDate().</p>
                }
            </div>
        </div>
        <div class="form-group form-group-condensed">
            <div class="col-sm-4 control-label">
                @Html.LabelWithSugarFor(FieldDefinition.ExpirationDate, LabelWithSugarForExtensions.DisplayStyle.HelpIconOnly) <strong>Expiration Date</strong>
            </div>
            <div class="col-sm-8">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.EditorFor(m => m.ExpirationDate, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                    @Html.ValidationMessageFor(m => m.ExpirationDate)
                }
                else
                {
                    <p class="form-control-static">@ViewDataTyped.ProjectUpdate.GetExpirationDateFormatted()</p>
                }
            </div>
        </div>
        <div class="form-group form-group-condensed">
            <div class="col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.CompletionDate)
            </div>
            <div class="col-sm-8">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.EditorFor(m => m.CompletionDate, new { @class = "form-control", style = "width: auto;" })
                    @Html.ValidationMessageFor(m => m.CompletionDate)
                }
                else
                {
                    <p class="form-control-static">@ViewDataTyped.ProjectUpdate.GetCompletionDateFormatted()</p>
                }
            </div>
        </div>

        <div class="form-group">
            <div id="focusAreaDiv" class="col-xs-12 col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.FocusAreaID, true)
            </div>
            <div class="col-xs-12 col-sm-8">
                @Html.DropDownListFor(m => m.FocusAreaID, ViewDataTyped.FocusAreas, new { @class = "form-control", style = "width: auto;" })
                @Html.ValidationMessageFor(m => m.FocusAreaID)
            </div>
        </div>
        <div class="row form-group-condensed">
            <div class="col-sm-4 control-label">
                @Html.LabelWithSugarFor(FieldDefinition.ProjectType)
            </div>
            <div id="projectTypeDisplayNameDiv" class="col-sm-8">
                @ViewDataTyped.ProjectTypeDisplayName
            </div>
        </div>
    </div>

    if (ViewDataTyped.IsEditable)
    {
        if (ViewDataTyped.ShowApproveAndReturnButton)
        {
            <hr />
            <div class="row form-group">
                <div class="col-sm-4 control-label">@Html.LabelWithSugarFor(x => x.Comments)</div>
                <div class="col-sm-8">
                    @Html.TextAreaFor(x => x.Comments, new { style = "width: 100%", @class = "form-control" })
                </div>
            </div>
        }
        <hr />
        SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData);
        <div>
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null, null, "Undo all changes on this page")
                        @if (ViewDataTyped.UpdateStatus.IsBasicsUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Basics", FieldDefinition.Project.GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null)
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)">Save</button>
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                    </td>
                </tr>
            </table>
        </div>
    }
}


<script type="text/javascript">
    jQuery(document)
        .ready(function() {
            // Get the invoice approval status, return true if the comment field is mandatory (when denial happens, comment is mandatory)
            var isInvoiceCommentFieldMandatory = function () {
                var selectedInvoiceApprovalStatus = jQuery("#projectTypeDisplayNameDiv").text().trim();
                if (selectedInvoiceApprovalStatus == 'Fuels Reduction') {
                    return true;
                } else {
                    return false;
                }
            }

            var initialLoadCommentIsMandatory = isInvoiceCommentFieldMandatory();
            if (initialLoadCommentIsMandatory) {
                jQuery("#focusAreaDiv")
                    .html('@Html.LabelWithSugarFor(m => m.FocusAreaID, true)');
            } else {
                jQuery("#focusAreaDiv")
                    .html('@Html.LabelWithSugarFor(m => m.FocusAreaID, false)');
            }
        });
</script>
