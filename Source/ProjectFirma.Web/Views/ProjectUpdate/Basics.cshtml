@*-----------------------------------------------------------------------
<copyright file="Basics.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using LtInfo.Common.Views
@using Newtonsoft.Json.Linq
@inherits Basics

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable)
    {
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").controller("BasicsController", function($scope, angularModelAndViewData)
            {
                $scope.AngularViewData = angularModelAndViewData.AngularViewData;
                $scope.AngularModel = angularModelAndViewData.AngularModel;
            });

            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: { ShowValidationWarnings: true},
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                };
            });
            jQuery(document).ready(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
            // ]]>
        </script>
    }
}

<p>
    Update your @FieldDefinition.Project.GetFieldDefinitionLabel()’s basic information here. If this @FieldDefinition.Project.GetFieldDefinitionLabel() is complete, be sure to select "Complete" or "Post-Implementation"
    from the @FieldDefinition.ProjectStage.GetFieldDefinitionLabel() dropdown. Changes made here will not take effect until a review approves your updates.
</p>
<hr />
@using (Html.BeginForm())
{
    <div class="form-horizontal">
        <div class="row form-group-condensed">
            <div class="col-md-3">
                @Html.LabelWithSugarFor(FieldDefinition.TaxonomyTierOne)
            </div>
            <div class="col-md-9">
                @ViewDataTyped.TaxonomyTierOneDisplayName
            </div>
        </div>
        <div class="row form-group-condensed">
            <div class="col-md-3">
                @Html.LabelWithSugarFor(m => m.ProjectDescription, true)
            </div>
            <div class="col-md-9">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.TextAreaWithMaxLengthFor(m => m.ProjectDescription, new TextAreaForExtensions.TextAreaDimensions(null, 6), null)
                    @Html.ValidationMessageFor(m => m.ProjectDescription)
                }
                else
                {
                    <div style="width: 464px">
                        @Html.Raw(ViewDataTyped.ProjectUpdate.ProjectDescription.HtmlEncodeWithBreaks())
                    </div>
                }
            </div>
        </div>
        <div class="row form-group-condensed">
            <div class="col-md-3">
                @Html.LabelWithSugarFor(m => m.ProjectStageID, true)
            </div>
            <div class="col-md-9">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.ProjectStageID, ViewDataTyped.ProjectStages)
                    @Html.ValidationMessageFor(m => m.ProjectStageID)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.ProjectStage.ProjectStageDisplayName
                }
            </div>
        </div>
        @switch (ViewDataTyped.Project.FundingType.ToEnum)
        {
            case FundingTypeEnum.Capital:
                <div class="row form-group-condensed">
                    <div class="col-md-3">
                        @Html.LabelWithSugarFor(FieldDefinition.EstimatedTotalCost)
                    </div>
                    <div class="col-md-3">
                        @if (ViewDataTyped.IsEditable)
                        {
                            @Html.EditorFor(m => m.EstimatedTotalCost)
                            @Html.ValidationMessageFor(m => m.EstimatedTotalCost)
                        }
                        else
                        {
                            @ViewDataTyped.ProjectUpdate.EstimatedTotalCost.ToStringCurrency()
                        }
                    </div>
                    @if (CostParameterSet.CanCalculateCapitalCostInYearOfExpenditure(ViewDataTyped.ProjectUpdate))
                    {
                        <div class="col-md-3">
                            <span>@Html.LabelWithSugarFor(FieldDefinition.ProjectCostInYearOfExpenditure)</span>
                        </div>
                            <div class="col-md-3">
                                <span>@ViewDataTyped.CapitalCostInYearOfExpenditure.ToStringCurrency()</span>
                                <span> (Using @ViewDataTyped.InflationRate.ToStringPercent() annual inflation)</span>
                            </div>
                        

                    }
                </div>
                <div class="row form-group-condensed">
                    <div class="col-md-3">
                        @Html.LabelWithSugarFor(FieldDefinition.SecuredFunding)
                    </div>
                    <div class="col-md-3">
                        @if (ViewDataTyped.IsEditable)
                        {
                            @Html.EditorFor(m => m.SecuredFunding)
                            @Html.ValidationMessageFor(m => m.SecuredFunding)
                        }
                        else
                        {
                            @ViewDataTyped.ProjectUpdate.SecuredFunding.ToStringCurrency()
                        }
                    </div>
                    <div class="col-md-3">
                        @Html.LabelWithSugarFor(FieldDefinition.UnfundedNeed)
                    </div>
                    <div class="col-md-3">
                        @ViewDataTyped.Project.UnfundedNeed.ToStringCurrency()
                    </div>
                </div>
                        break;
            case FundingTypeEnum.OperationsAndMaintenance:
            <div class="row form-group-condensed">
                <div class="col-md-3">
                    @Html.LabelWithSugarFor(FieldDefinition.EstimatedAnnualOperatingCost)
                </div>
                <div class="col-md-3">
                    @if (ViewDataTyped.IsEditable)
                    {
                        @Html.EditorFor(m => m.EstimatedAnnualOperatingCost)
                        @Html.ValidationMessageFor(m => m.EstimatedAnnualOperatingCost)
                    }
                    else
                    {
                        @ViewDataTyped.ProjectUpdate.EstimatedAnnualOperatingCost.ToStringCurrency()
                    }
                </div>
                <div class="col-md-3">
                    @Html.LabelWithSugarFor(FieldDefinition.LifecycleOperatingCost)
                </div>
                <div class="col-md-3">
                    @if (CostParameterSet.CanCalculateLifecycleOperatingCost(ViewDataTyped.ProjectUpdate))
                    {
                        @CostParameterSet.LifecycleOperatingCost(ViewDataTyped.ProjectUpdate).ToStringCurrency()
                    }
                </div>
            </div>
                    if (CostParameterSet.CanCalculateTotalRemainingOperatingCostInYearOfExpenditure(ViewDataTyped.ProjectUpdate))
                    {
                        <div class="row form-group-condensed">
                            <div class="col-md-3">

                                @Html.LabelWithSugarFor(FieldDefinition.CalculatedTotalRemainingOperatingCost)
                            </div>
                            <div class="col-md-9">
                                <span>@ViewDataTyped.TotalOperatingCostInYearOfExpenditure.ToStringCurrency()</span>
                                <span>(For years @ViewDataTyped.StartYearForTotalOperatingCostCalculation-@ViewDataTyped.ProjectUpdate.CompletionYear using @ViewDataTyped.InflationRate.ToStringPercent() annual inflation)</span>
                            </div>
                        </div>
                    }
                    break;
        }
        <div class="row form-group-condensed">
            <div class="col-md-3">
                @Html.LabelWithSugarFor(m => m.PlanningDesignStartYear, true)
            </div>
            <div class="col-md-9">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.PlanningDesignStartYear, ViewDataTyped.PlanningDesignStartYearRange)
                    @Html.ValidationMessageFor(m => m.PlanningDesignStartYear)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.PlanningDesignStartYear
                }
            </div>
        </div>

        <div class="row form-group-condensed">
            <div class="col-md-3">
                @Html.LabelWithSugarFor(m => m.ImplementationStartYear, true)
            </div>
            <div class="col-md-3">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.ImplementationStartYear, ViewDataTyped.ImplementationStartYearRange)
                    @Html.ValidationMessageFor(m => m.ImplementationStartYear)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.ImplementationStartYear
                }
            </div>
            <div class="col-md-3">
                @Html.LabelWithSugarFor(m => m.CompletionYear)
            </div>

            <div class="col-md-3">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.CompletionYear, ViewDataTyped.CompletionYearRange)
                    @Html.ValidationMessageFor(m => m.CompletionYear)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.CompletionYear
                }
            </div>
        </div>
        <div class="row form-group-condensed">
            <div class="col-md-3">
                @Html.LabelWithSugarFor(FieldDefinition.PrimaryContact)
            </div>
            <div class="col-md-9">
                @if (ViewDataTyped.PrimaryContactPerson != null)
                {
                    <a href="@ViewDataTyped.PrimaryContactPerson.GetDetailUrl()" target="_blank">@ViewDataTyped.PrimaryContactPerson.FullNameFirstLast</a>
                    if (ViewDataTyped.PrimaryContactPerson.Organization != null)
                    {
                        <span>-</span>
                        <a href="@ViewDataTyped.PrimaryContactPerson.Organization.GetDetailUrl()" target="_blank">@ViewDataTyped.PrimaryContactPerson.Organization.DisplayName</a>
                    }
                    else
                    {
                        <span>-</span>
                        <p> No Primary Contact set. </p>
                    }

                    <div>
                        <i>To update the @FieldDefinition.PrimaryContact.GetFieldDefinitionLabel() for this project please 
                            @ModalDialogFormHelper.ModalDialogFormLink("contact support", ViewDataTyped.RequestPrimaryContactChangeUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)    
                        </i>
                    </div>
                }
            </div>
        </div>

    </div>    

    if (ViewDataTyped.IsEditable)
    {
        if (ViewDataTyped.ShowApproveAndReturnButton)
        {
            <hr />
            <div class="row form-group">
                <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                <div class="col-md-9">
                    @Html.TextAreaFor(x => x.Comments, new { @class = "sectionComments" })
                    @Html.Hidden("Section", ViewDataTyped.SelectedProjectUpdateSection)
                </div>            </div>
        }
        <hr />
        SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData);
        <div ng-app="ProjectFirmaApp" ng-controller="BasicsController">
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("Refresh", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null)
                        @if (ViewDataTyped.UpdateStatus.IsBasicsUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Basics", FieldDefinition.Project.GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "diff-close-button", "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null, new List<string>() { "btn-firma", "btn-xs" })
                        }
                    </td>
                    <td>
                        @if (ViewDataTyped.ViewDataForAngular.ValidationWarnings.Any())
                        {
                            <div class="alert alert-danger">
                                <ul>
                                    <li data-ng-repeat="warning in AngularViewData.ValidationWarnings">
                                        <span data-ng-bind="warning"></span>
                                    </li>
                                </ul>
                            </div>
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        <button class="btn btn-xs btn-firma" type="submit" style="margin-left: 10px">Save</button>
                    </td>
                </tr>
            </table>
        </div>
    }
}
