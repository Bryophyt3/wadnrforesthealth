@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Indicator
@using LtInfo.Common
@using LtInfo.Common.Mvc
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits IndicatorChart

<style>
    .chartWrapper {
        background: #FFF;
        border-radius: 10px;
        margin: 0 0 10px 10px;
        padding: 2px;
        vertical-align: top;
    }

    .chartHeader {
        padding: 0 5px;
    }

    .subcategorySelector {
        font-size: 13px;
        margin-top: 5px;
    }
</style>

@if (ViewDataTyped.HasChartData)
{
    <div class="chartWrapper" style="display: inline-block">

        <div class="chartHeader" style="overflow-y: hidden; vertical-align: top; min-height: 30px; max-width: @(ViewDataTyped.ChartWidth - 150)px">
            <div class="chartTitle">
                @if (ViewDataTyped.HyperlinkIndicatorName)
                {
                    <span class="helpicon glyphicon glyphicon-question-sign blue" title="Click to get more info on this PM" onmouseover="ProjectFirma.Views.Methods.addHelpTooltipPopup(jQuery(this), @ViewDataTyped.Indicator.ChartTitle.ToJS(), @ViewDataTyped.Indicator.GetDefinitionAndGuidanceUrl().ToJS(), 430)"></span>
                    <a href="@ViewDataTyped.Indicator.GetSummaryUrl()" class="chartHeader">@ViewDataTyped.Indicator.IndicatorDisplayName</a>
                }
                else
                {
                    <b>@ViewDataTyped.Indicator.ChartTitle</b>
                }

            </div>
            @{
    var subcategoriesForIndicatorChart = ViewDataTyped.Indicator.GetSubcategoriesForIndicatorChart();
            }
            @if (!subcategoriesForIndicatorChart.Any())
            {
                <!-- MB: This is to ensure that all three logical branches give us the same overall height; otherwise the ltinfoChartControls DIV sometimes gets offset wrong -->
                <br />
            }
            else
            {
                if (subcategoriesForIndicatorChart.Count == 1)
                {
                    if (!ViewDataTyped.Indicator.IndicatorDisplayName.Equals(subcategoriesForIndicatorChart.Single().IndicatorSubcategoryDisplayName, StringComparison.InvariantCultureIgnoreCase))
                    {
                        <div>
                            By: @subcategoriesForIndicatorChart.Single().IndicatorSubcategoryDisplayName
                        </div>
                    }
                }
                else
                {
                    <div class="subcategorySelector" id="subcategorySelectorForPM@(ViewDataTyped.Indicator.IndicatorID)"> By: @Html.DropDownList("subcategoryDropdownForPM" + ViewDataTyped.Indicator.IndicatorID, ViewDataTyped.GoogleChartJsonDictionary.OrderBy(x => x.Value.LegendTitle).ToSelectList(x => x.Value.ChartName, x => x.Value.LegendTitle)) </div>
                }
            }
        </div>

        <div class="chartBody" style="height: @(ViewDataTyped.ChartHeight)px; width: @(ViewDataTyped.ChartWidth)px;">

            @foreach (var googleChartJson in ViewDataTyped.GoogleChartJsonDictionary.Values.OrderByDescending(x => x.LegendTitle))
            {
                <div id="@(googleChartJson.ChartName)_container" class="chartGroup@(ViewDataTyped.Indicator.IndicatorID)" style="position: absolute; width: @(ViewDataTyped.ChartWidth)px; height: @(ViewDataTyped.ChartHeight)px">

                    <!-- Expand / Save / Configure controls, based on current ChartViewMode -->
                    <div class="ltinfoChartControls noPrint">
                        @switch (ViewDataTyped.ChartViewMode)
                        {
                            case ChartViewMode.Small:
                                <a class="expandBox" href="@googleChartJson.ChartPopupUrl">
                                    <span class="glyphicon glyphicon-fullscreen" style="margin-right: 5px"></span>Enlarge
                                </a>
                                break;
                            case ChartViewMode.Large:
                            <a onclick="GoogleCharts.configureChart('@googleChartJson.ChartName')" href="#" style="margin-right: 10px">
                                <span class="glyphicon glyphicon-wrench" style="margin-right: 5px"></span>Customize
                            </a>
                            <a onclick="GoogleCharts.downloadChartPNG('@googleChartJson.ChartName');" href="#">
                                <span class="glyphicon glyphicon-save" style="margin-right: 5px"></span>Download
                            </a>
                                break;
                            case ChartViewMode.ManagementMode:
                            <a class="expandBox" href="@googleChartJson.ChartPopupUrl" style="margin-right: 10px"><span class="glyphicon glyphicon-fullscreen" style="margin-right: 5px"></span>Enlarge</a>
                            <a onclick="GoogleCharts.configureChart('@googleChartJson.ChartName', '@googleChartJson.SaveConfigurationUrl')" href="#" style="margin-right: 10px">
                                <span class="glyphicon glyphicon-wrench" style="margin-right: 5px"></span>Configure
                            </a>
                                break;
                            case ChartViewMode.NoPopup:
                                break;
                        }
                    </div>

                    <div id="@googleChartJson.ChartName" style="margin-top: 0; width: @(ViewDataTyped.ChartWidth)px; height: @(ViewDataTyped.ChartHeight)px">
                        <!-- Actual chart goes here-->
                    </div>
                </div>
            }

        </div>

        <script type="text/javascript">
            jQuery(document).ready(function()
            {
                var googleCharts = @Html.Raw(JObject.FromObject(ViewDataTyped.GoogleChartJsonDictionary).ToString(Formatting.None));
                for (var chartName in googleCharts)
                {
                    var googleChart = googleCharts[chartName];
                    wireDropdown(chartName, googleChart.groupId);
                }
                if (@((ViewDataTyped.ChartViewMode != ChartViewMode.Large).ToString().ToLower()) == true)
                {
                    GoogleCharts.drawCharts(googleCharts);
                }
                else
                {
                    GoogleCharts.drawCharts(googleCharts); //height and width get set in javascript for enlarged charts
                }
            });

            function wireDropdown(chartName, groupId)
            {
                var templateDropdown = jQuery("#subcategoryDropdownForPM" + groupId);
                var itemCount = jQuery("#subcategoryDropdownForPM" + groupId + " option").length;
                if (itemCount > 1)
                {
                    templateDropdown.change(function()
                    {
                        jQuery(".chartGroup" + groupId).css("display", "none");
                        jQuery("#" + templateDropdown.val() + "_container").css("display", "");
                    });
                }
                else
                {
                    jQuery("#subcategorySelectorForPM" + chartName).css("display", "none");
                }
            }
        </script>




    </div>
}
else
{
    <p class="alert">No reported data for this Indicator</p>
}