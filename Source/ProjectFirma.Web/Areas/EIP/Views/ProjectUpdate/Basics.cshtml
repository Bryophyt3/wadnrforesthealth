@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Areas.EIP.Views.ProjectUpdate
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using LtInfo.Common.Views
@using Newtonsoft.Json.Linq
@inherits Basics

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable)
    {
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").controller("BasicsController", function($scope, angularModelAndViewData)
            {
                $scope.AngularViewData = angularModelAndViewData.AngularViewData;
                $scope.AngularModel = angularModelAndViewData.AngularModel;
            });

            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: { ShowValidationWarnings: @Model.ShowValidationWarnings.ToString().ToLower() },
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                    };
            });
            jQuery(document).ready(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
            // ]]>
        </script>
    }
}

<p>
    Update your project’s basic information here. If this project is complete, be sure to select "Complete" or "Post-Implementation"
    from the Stage dropdown. Changes made here will not take effect until TRPA approves your updates.
</p>
<hr />
@using (Html.BeginForm())
{
    <table class="formLayout">
        <tr>
            <th>@Html.LabelWithFieldDefinitionFor(FieldDefinition.ActionPriority, 600):</th>
            <td colspan="3">@ViewDataTyped.ActionPriorityDisplayName</td>
        </tr>
        <tr>
            <th>@Html.LabelWithFieldDefinitionFor(m => m.ProjectDescription):</th>
            <td colspan="3">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.TextAreaWithMaxLengthFor(m => m.ProjectDescription, new TextAreaForExtensions.TextAreaDimensions(null, 6), null)
                    @Html.ValidationMessageFor(m => m.ProjectDescription)
                }
                else
                {
                    <div style="width: 464px">
                        @Html.Raw(ViewDataTyped.ProjectUpdate.ProjectDescription.HtmlEncodeWithBreaks())
                    </div>
                }
            </td>
        </tr>
        <tr>
            <th>@Html.LabelWithFieldDefinitionWiderFor(m => m.ProjectStageID):</th>
            <td colspan="3">
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.ProjectStageID, ViewDataTyped.ProjectStages)
                    @Html.ValidationMessageFor(m => m.ProjectStageID)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.ProjectStage.ProjectStageDisplayName
                }
            </td>
        </tr>
        @switch (ViewDataTyped.Project.FundingType.ToEnum)
        {
            case FundingTypeEnum.Capital:
                <tr>
                    <th style="white-space: nowrap">@Html.LabelWithFieldDefinitionFor(FieldDefinition.EstimatedTotalCost):</th>
                    <td>
                        @if (ViewDataTyped.IsEditable)
                        {
                            @Html.EditorFor(m => m.EstimatedTotalCost)
                            @Html.ValidationMessageFor(m => m.EstimatedTotalCost)
                        }
                        else
                        {
                            @ViewDataTyped.ProjectUpdate.EstimatedTotalCost.ToStringCurrency()
                            ;
                        }
                    </td>
                    @if (TransportationCostParameterSet.CanCalculateCapitalCostInYearOfExpenditure(ViewDataTyped.ProjectUpdate))
                    {
                        <td colspan="3">
                            <span class="stylizeLikeTH">@Html.LabelWithFieldDefinitionFor(FieldDefinition.ProjectCostInYearOfExpenditure):</span>
                            <span style="margin-left: 10px">@ViewDataTyped.CapitalCostInYearOfExpenditure.ToStringCurrency()</span>
                            <span> (Using @ViewDataTyped.InflationRate.ToStringPercent() annual inflation)</span>
                        </td>
                    }
                </tr>
                <tr>
                    <th style="white-space: nowrap">@Html.LabelWithFieldDefinitionFor(FieldDefinition.SecuredFunding):</th>
                    <td>
                        @if (ViewDataTyped.IsEditable)
                        {
                            @Html.EditorFor(m => m.SecuredFunding)
                            @Html.ValidationMessageFor(m => m.SecuredFunding)
                        }
                        else
                        {
                            @ViewDataTyped.ProjectUpdate.SecuredFunding.ToStringCurrency()
                        }
                    </td>
                    <th style="white-space: nowrap">@Html.LabelWithFieldDefinitionFor(FieldDefinition.UnfundedNeed):</th>
                    <td>
                        @ViewDataTyped.Project.UnfundedNeed.ToStringCurrency()
                    </td>
                </tr>
                        break;
            case FundingTypeEnum.OperationsAndMaintenance:
            <tr>
                <th style="white-space: nowrap">@Html.LabelWithFieldDefinitionFor(FieldDefinition.EstimatedAnnualOperatingCost):</th>
                <td>
                    @if (ViewDataTyped.IsEditable)
                    {
                        @Html.EditorFor(m => m.EstimatedAnnualOperatingCost)
                        @Html.ValidationMessageFor(m => m.EstimatedAnnualOperatingCost)
                    }
                    else
                    {
                        @ViewDataTyped.ProjectUpdate.EstimatedAnnualOperatingCost.ToStringCurrency()
                    }
                </td>
                <th>@Html.LabelWithFieldDefinitionFor(FieldDefinition.LifecycleOperatingCost):</th>
                <td>
                    @if (TransportationCostParameterSet.CanCalculateLifecycleOperatingCost(ViewDataTyped.ProjectUpdate))
                    {
                        @TransportationCostParameterSet.LifecycleOperatingCost(ViewDataTyped.ProjectUpdate).ToStringCurrency()
                    }
                </td>
            </tr>
                    if (TransportationCostParameterSet.CanCalculateTotalRemainingOperatingCostInYearOfExpenditure(ViewDataTyped.ProjectUpdate))
                    {
                        <tr>
                            <th>
                                @Html.LabelWithFieldDefinitionFor(FieldDefinition.CalculatedTotalRemainingOperatingCost):
                            </th>
                            <td colspan="3">
                                <span>@ViewDataTyped.TotalOperatingCostInYearOfExpenditure.ToStringCurrency()</span>
                                <span>(For years @ViewDataTyped.StartYearForTotalOperatingCostCalculation-@ViewDataTyped.ProjectUpdate.CompletionYear using @ViewDataTyped.InflationRate.ToStringPercent() annual inflation)</span>
                            </td>
                        </tr>
                    }
                    break;
        }
        <tr>
            <th>@Html.LabelWithFieldDefinitionFor(m => m.PlanningDesignStartYear):</th>
            <td>
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.PlanningDesignStartYear, ViewDataTyped.PlanningDesignStartYearRange)
                    @Html.ValidationMessageFor(m => m.PlanningDesignStartYear)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.PlanningDesignStartYear
                }
            </td>
        </tr>
        <tr>
            <th>@Html.LabelWithFieldDefinitionFor(m => m.ImplementationStartYear):</th>
            <td>
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.ImplementationStartYear, ViewDataTyped.ImplementationStartYearRange)
                    @Html.ValidationMessageFor(m => m.ImplementationStartYear)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.ImplementationStartYear
                }
            </td>
            <th style="white-space: nowrap">@Html.LabelWithFieldDefinitionFor(m => m.CompletionYear):</th>
            <td>
                @if (ViewDataTyped.IsEditable)
                {
                    @Html.DropDownListFor(m => m.CompletionYear, ViewDataTyped.CompletionYearRange)
                    @Html.ValidationMessageFor(m => m.CompletionYear)
                }
                else
                {
                    @ViewDataTyped.ProjectUpdate.CompletionYear
                }
            </td>
        </tr>
        <tr>
            <th>@Html.LabelWithFieldDefinitionFor(FieldDefinition.LeadImplementer):</th>
            <td colspan="3">
                @if (ViewDataTyped.Project.LeadImplementer != null)
                {
                    <a href="@ViewDataTyped.Project.LeadImplementer.GetSummaryUrl()" target="_blank">@ViewDataTyped.Project.LeadImplementer.DisplayName</a>
                }
            </td>
        </tr>
        <tr>
            <th>@Html.LabelWithFieldDefinitionFor(FieldDefinition.PrimaryContact):</th>
            <td colspan="3">
                @if (ViewDataTyped.Project.PrimaryContactPerson != null)
                {
                    <a href="@ViewDataTyped.Project.PrimaryContactPerson.GetSummaryUrl()" target="_blank">@ViewDataTyped.Project.PrimaryContactPerson.FullNameFirstLast</a>
                    if (ViewDataTyped.Project.PrimaryContactPerson.Organization != null)
                    {
                        <span>-</span>
                        <a href="@ViewDataTyped.Project.PrimaryContactPerson.Organization.GetSummaryUrl()" target="_blank">@ViewDataTyped.Project.PrimaryContactPerson.Organization.DisplayName</a>
                    }
                }
            </td>
        </tr>
        @if (ViewDataTyped.Project.IsTransportationProject)
        {
            <tr>
                <th style="white-space: nowrap">
                    @Html.LabelWithFieldDefinitionFor(FieldDefinition.TransportationObjective) / @Html.LabelWithFieldDefinitionFor(FieldDefinition.TransportationStrategy, "Strategy"):
                </th>
                <td colspan="3">
                    @ViewDataTyped.Project.TransportationObjective.TransportationStrategy.DisplayNameAsUrl /
                    @ViewDataTyped.Project.TransportationObjective.DisplayNameAsUrl
                    <div>
                        This project is @(!ViewDataTyped.Project.OnFederalTransportationImprovementProgramList ? " not " : "") on the Federal Transportation Improvement Program (FTIP) list.
                        @if (!ViewDataTyped.Project.OnFederalTransportationImprovementProgramList)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("Request to be added to FTIP", ViewDataTyped.RequestToBeAddedToFTIPUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
                        }
                    </div>
                </td>
            </tr>
        }
    </table>
    <hr />
    <div>
        View the current Project Summary for <a href="@ViewDataTyped.Project.GetSummaryUrl()" target="_blank">@ViewDataTyped.Project.DisplayName</a>
    </div>

    if (ViewDataTyped.IsEditable)
    {
        <hr />
        if (ViewDataTyped.ShowApproveAndReturnButton)
        {
            <table class="formLayout">
                <tr>
                    <th>@Html.LabelFor(x => x.Comments):</th>
                    <td>
                        @Html.TextAreaFor(x => x.Comments, new { @class = "sectionComments" })
                        @Html.Hidden("Section", ViewDataTyped.SelectedProjectUpdateSection)
                    </td>
                </tr>
            </table>
        }

        SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData);
        <div ng-app="ProjectFirmaApp" ng-controller="BasicsController">
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("Refresh", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Cancel", new List<string> { "btn btn-xs btn-trpa" }, null, null)
                        @if (ViewDataTyped.UpdateStatus.IsBasicsUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, "Changes to Project Basics", 800, "hidden-save-button", string.Empty, "diff-close-button", "Close", new List<string> { "btn btn-xs btn-trpa" }, null, null, null, new List<string>() { "btn-trpa", "btn-xs" })
                        }
                    </td>
                    <td>
                        @if (ViewDataTyped.ViewDataForAngular.ValidationWarnings.Any())
                        {
                            <table data-ng-show="AngularModel.ShowValidationWarnings" data-ng-class="AngularModel.ShowValidationWarnings ? 'validationWarning' : 'hidden'">
                                <tr data-ng-repeat="warning in AngularViewData.ValidationWarnings">
                                    <td>@Html.Raw(ProjectWizardComponents.RequiredInfoNotProvidedIcon)</td>
                                    <td data-ng-bind="warning"></td>
                                </tr>
                            </table>
                        }
                        else
                        {
                            <div ng-show="AngularModel.ShowValidationWarnings" data-ng-class="AngularModel.ShowValidationWarnings ? 'greenLight' : 'hidden'">
                                <span>This page is all set!  Nice work.  You should take the rest of the day off.</span>
                            </div>
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        @Html.CheckBoxFor(x => x.ShowValidationWarnings, new { data_ng_model = "AngularModel.ShowValidationWarnings", @class = "ignoreSerialization" })
                        @Html.LabelFor(x => x.ShowValidationWarnings)
                        <button class="btn btn-xs btn-trpa" type="submit" style="margin-left: 10px">Save</button>
                    </td>
                </tr>
            </table>
        </div>
    }
}