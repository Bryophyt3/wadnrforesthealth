!function(n){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self);t.leafletPip=n()}}(function(){return function n(t,i,r){function u(f,o){var h,s;if(!i[f]){if(!t[f]){if(h=typeof require=="function"&&require,!o&&h)return h(f,!0);if(e)return e(f,!0);throw new Error("Cannot find module '"+f+"'");}s=i[f]={exports:{}};t[f][0].call(s.exports,function(n){var i=t[f][1][n];return u(i?i:n)},s,s.exports,n,t,i,r)}return i[f].exports}for(var e=typeof require=="function"&&require,f=0;f<r.length;f++)u(r[f]);return u}({1:[function(n,t){var r=n("geojson-utils"),i={bassackwards:!1,pointInLayer:function(n,t,u){"use strict";n instanceof L.LatLng?n=[n.lng,n.lat]:i.bassackwards&&n.reverse();var f=[];return t.eachLayer(function(t){u&&f.length||(t instanceof L.MultiPolygon||t instanceof L.Polygon)&&r.pointInPolygon({type:"Point",coordinates:n},t.toGeoJSON().geometry)&&f.push(t)}),f}};t.exports=i},{"geojson-utils":2}],2:[function(n,t){(function(){function i(n){for(var t=[],i=[],r=0;r<n[0].length;r++)t.push(n[0][r][1]),i.push(n[0][r][0]);return t=t.sort(function(n,t){return n-t}),i=i.sort(function(n,t){return n-t}),[[t[0],i[0]],[t[t.length-1],i[i.length-1]]]}function r(n,t,i){for(var e,f,r=[[0,0]],u=0;u<i.length;u++){for(f=0;f<i[u].length;f++)r.push(i[u][f]);r.push(i[u][0]);r.push([0,0])}for(e=!1,u=0,f=r.length-1;u<r.length;f=u++)r[u][0]>t!=r[f][0]>t&&n<(r[f][1]-r[u][1])*(t-r[u][0])/(r[f][0]-r[u][0])+r[u][1]&&(e=!e);return e}var n=this.gju={};typeof t!="undefined"&&t.exports&&(t.exports=n);n.lineStringsIntersect=function(n,t){for(var u,o,l,s=[],f=0;f<=n.coordinates.length-2;++f)for(u=0;u<=t.coordinates.length-2;++u){var i={x:n.coordinates[f][1],y:n.coordinates[f][0]},e={x:n.coordinates[f+1][1],y:n.coordinates[f+1][0]},r={x:t.coordinates[u][1],y:t.coordinates[u][0]},h={x:t.coordinates[u+1][1],y:t.coordinates[u+1][0]},a=(h.x-r.x)*(i.y-r.y)-(h.y-r.y)*(i.x-r.x),v=(e.x-i.x)*(i.y-r.y)-(e.y-i.y)*(i.x-r.x),c=(h.y-r.y)*(e.x-i.x)-(h.x-r.x)*(e.y-i.y);c!=0&&(o=a/c,l=v/c,0<=o&&o<=1&&0<=l&&l<=1&&s.push({type:"Point",coordinates:[i.x+o*(e.x-i.x),i.y+o*(e.y-i.y)]}))}return s.length==0&&(s=!1),s};n.pointInBoundingBox=function(n,t){return!(n.coordinates[1]<t[0][0]||n.coordinates[1]>t[1][0]||n.coordinates[0]<t[0][1]||n.coordinates[0]>t[1][1])};n.pointInPolygon=function(t,u){for(var o,e=u.type=="Polygon"?[u.coordinates]:u.coordinates,s=!1,f=0;f<e.length;f++)n.pointInBoundingBox(t,i(e[f]))&&(s=!0);if(!s)return!1;for(o=!1,f=0;f<e.length;f++)r(t.coordinates[1],t.coordinates[0],e[f])&&(o=!0);return o};n.pointInMultiPolygon=function(t,u){for(var e,f,c=u.type=="MultiPolygon"?[u.coordinates]:u.coordinates,o=!1,s=!1,h=0;h<c.length;h++){for(e=c[h],f=0;f<e.length;f++)o||n.pointInBoundingBox(t,i(e[f]))&&(o=!0);if(!o)return!1;for(f=0;f<e.length;f++)s||r(t.coordinates[1],t.coordinates[0],e[f])&&(s=!0)}return s};n.numberToRadius=function(n){return n*Math.PI/180};n.numberToDegree=function(n){return n*180/Math.PI};n.drawCircle=function(t,i,r){for(var e=[i.coordinates[1],i.coordinates[0]],o=t/6371e3,f=[n.numberToRadius(e[0]),n.numberToRadius(e[1])],r=r||15,s=[[e[0],e[1]]],u=0;u<r;u++){var h=2*Math.PI*u/r,c=Math.asin(Math.sin(f[0])*Math.cos(o)+Math.cos(f[0])*Math.sin(o)*Math.cos(h)),l=f[1]+Math.atan2(Math.sin(h)*Math.sin(o)*Math.cos(f[0]),Math.cos(o)-Math.sin(f[0])*Math.sin(c));s[u]=[];s[u][1]=n.numberToDegree(c);s[u][0]=n.numberToDegree(l)}return{type:"Polygon",coordinates:[s]}};n.rectangleCentroid=function(n){var t=n.coordinates[0],i=t[0][0],r=t[0][1],u=t[2][0],f=t[2][1],e=u-i,o=f-r;return{type:"Point",coordinates:[i+e/2,r+o/2]}};n.pointDistance=function(t,i){var e=t.coordinates[0],r=t.coordinates[1],o=i.coordinates[0],u=i.coordinates[1],s=n.numberToRadius(u-r),h=n.numberToRadius(o-e),f=Math.pow(Math.sin(s/2),2)+Math.cos(n.numberToRadius(r))*Math.cos(n.numberToRadius(u))*Math.pow(Math.sin(h/2),2),c=2*Math.atan2(Math.sqrt(f),Math.sqrt(1-f));return 6371e3*c};n.geometryWithinRadius=function(t,i,r){var u,f,e;if(t.type=="Point")return n.pointDistance(t,i)<=r;if(t.type=="LineString"||t.type=="Polygon"){u={};f=t.type=="Polygon"?t.coordinates[0]:t.coordinates;for(e in f)if(u.coordinates=f[e],n.pointDistance(u,i)>r)return!1}return!0};n.area=function(n){for(var f,e,r=0,t=n.coordinates[0],u=t.length-1,i=0;i<t.length;u=i++)f={x:t[i][1],y:t[i][0]},e={x:t[u][1],y:t[u][0]},r+=f.x*e.y,r-=f.y*e.x;return r/2};n.centroid=function(t){for(var u,f,i,s=0,h=0,r=t.coordinates[0],o=r.length-1,e=0;e<r.length;o=e++)u={x:r[e][1],y:r[e][0]},f={x:r[o][1],y:r[o][0]},i=u.x*f.y-f.x*u.y,s+=(u.x+f.x)*i,h+=(u.y+f.y)*i;return i=n.area(t)*6,{type:"Point",coordinates:[h/i,s/i]}};n.simplify=function(n,t){var ut,i;t=t||20;n=n.map(function(n){return{lng:n.coordinates[0],lat:n.coordinates[1]}});var nt,u,s,r,f,i,a,tt,v,y,e,c,p,o,l,w,h,it,b,rt=Math.PI/180*.5,k=[],d=[],g=[];if(n.length<3)return n;for(nt=n.length,y=t*360/(12756274*Math.PI),y*=y,s=0,d[0]=0,g[0]=nt-1,u=1;u>0;)if(r=d[u-1],f=g[u-1],u--,f-r>1){for(e=n[f].lng()-n[r].lng(),c=n[f].lat()-n[r].lat(),Math.abs(e)>180&&(e=360-Math.abs(e)),e*=Math.cos(rt*(n[f].lat()+n[r].lat())),p=e*e+c*c,i=r+1,a=r,v=-1;i<f;i++)o=n[i].lng()-n[r].lng(),l=n[i].lat()-n[r].lat(),Math.abs(o)>180&&(o=360-Math.abs(o)),o*=Math.cos(rt*(n[i].lat()+n[r].lat())),w=o*o+l*l,h=n[i].lng()-n[f].lng(),it=n[i].lat()-n[f].lat(),Math.abs(h)>180&&(h=360-Math.abs(h)),h*=Math.cos(rt*(n[i].lat()+n[f].lat())),b=h*h+it*it,tt=w>=p+b?b:b>=p+w?w:(o*c-l*e)*(o*c-l*e)/p,tt>v&&(a=i,v=tt);v<y?(k[s]=r,s++):(u++,d[u-1]=a,g[u-1]=f,u++,d[u-1]=r,g[u-1]=a)}else k[s]=r,s++;for(k[s]=nt-1,s++,ut=[],i=0;i<s;i++)ut.push(n[k[i]]);return ut.map(function(n){return{type:"Point",coordinates:[n.lng,n.lat]}})};n.destinationPoint=function(t,i,r){r=r/6371;i=n.numberToRadius(i);var o=n.numberToRadius(t.coordinates[0]),u=n.numberToRadius(t.coordinates[1]),e=Math.asin(Math.sin(u)*Math.cos(r)+Math.cos(u)*Math.sin(r)*Math.cos(i)),f=o+Math.atan2(Math.sin(i)*Math.sin(r)*Math.cos(u),Math.cos(r)-Math.sin(u)*Math.sin(e));return f=(f+3*Math.PI)%(2*Math.PI)-Math.PI,{type:"Point",coordinates:[n.numberToDegree(f),n.numberToDegree(e)]}}})()},{}]},{},[1])(1)});
//# sourceMappingURL=leaflet-pip.min.js.map
